from datetime import date
from aiogram import Bot, Router, F
from aiogram.types import Message
from database import (
    get_upcoming_executor_deadlines,
    get_upcoming_specialist_deadlines,
    add_bonus_penalty  # üëà –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ database.py
)

router = Router()


# üîπ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º
async def notify_executors(bot: Bot, one_day_list: list):
    tasks = await get_upcoming_executor_deadlines()
    today = date.today()

    for task in tasks:
        if task["status"] == "–°–¥–µ–ª–∞–Ω–æ":
            continue

        days_left = (task["deadline"] - today).days
        executor_id = task["executor_id"]
        section = task["section"].upper()
        task_id = task["task_executor_id"]
        order_id = task["order_id"]
        title = task["title"]

        if days_left < 0:
            msg = f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ #{task_id} ¬´{title}¬ª –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞!"
            # üëá –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —à—Ç—Ä–∞—Ñ
            await add_bonus_penalty(
                telegram_id=executor_id,
                task_id=task_id,
                type="penalty",
                description=f"–ü—Ä–æ—Å—Ä–æ—á–∫–∞ –ø–æ —Ä–∞–∑–¥–µ–ª—É {section}, –∑–∞–¥–∞—á–∞ #{task_id}"
            )


        elif days_left == 0:
            msg = f"üìÖ –°–µ–≥–æ–¥–Ω—è –¥–µ–¥–ª–∞–π–Ω –ø–æ –∑–∞–¥–∞—á–µ #{task_id} ¬´{title}¬ª."
        elif days_left == 1:
            msg = f"‚è≥ –ó–∞–≤—Ç—Ä–∞ –¥–µ–¥–ª–∞–π–Ω –ø–æ –∑–∞–¥–∞—á–µ #{task_id} ¬´{title}¬ª."
            one_day_list.append(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {executor_id} ‚Äî –∑–∞–¥–∞—á–∞ #{task_id} ¬´{title}¬ª")
        else:
            continue

        await bot.send_message(chat_id=executor_id, text=msg)


# üîπ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º
async def notify_specialists(bot: Bot, one_day_list: list):
    tasks = await get_upcoming_specialist_deadlines()
    today = date.today()

    for task in tasks:
        if task["status"] == "–°–¥–µ–ª–∞–Ω–æ":
            continue

        days_left = (task["deadline"] - today).days
        specialist_id = task["specialist_id"]
        task_id = task["id"]
        order_id = task["order_id"]
        section = task["section"].upper()

        # üëÄ –õ–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"[DEBUG] task_id={task_id}, order_id={order_id}, specialist_id={specialist_id}, days_left={days_left}")

        if days_left < 0:
            msg = f"‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –ø–æ —Ä–∞–∑–¥–µ–ª—É {section}, –∑–∞–¥–∞—á–∞ #{task_id}"
            if order_id is None:
                print(f"[WARNING] –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–ø–∏—Å—å —à—Ç—Ä–∞—Ñ–∞: –Ω–µ—Ç order_id —É –∑–∞–¥–∞—á–∏ #{task_id}")
            else:
                # üëá –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —à—Ç—Ä–∞—Ñ
                await add_bonus_penalty(
                    telegram_id=specialist_id,
                    task_id=task_id,
                    type="penalty",
                    description=f"–ü—Ä–æ—Å—Ä–æ—á–∫–∞ –ø–æ —Ä–∞–∑–¥–µ–ª—É {section}, –∑–∞–¥–∞—á–∞ #{task_id}"
                )


        elif days_left == 0:
            msg = f"üìÖ –°–µ–≥–æ–¥–Ω—è –¥–µ–¥–ª–∞–π–Ω –ø–æ —Ä–∞–∑–¥–µ–ª—É {section}, –∑–∞–¥–∞—á–∞ #{task_id}"
        elif days_left == 1:
            msg = f"‚è≥ –ó–∞–≤—Ç—Ä–∞ –¥–µ–¥–ª–∞–π–Ω –ø–æ —Ä–∞–∑–¥–µ–ª—É {section}, –∑–∞–¥–∞—á–∞ #{task_id}"
            one_day_list.append(f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç {specialist_id} ‚Äî {section}, –∑–∞–¥–∞—á–∞ #{task_id}")
        else:
            continue

        await bot.send_message(chat_id=specialist_id, text=msg)

# üîÑ –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def run_deadline_check(bot: Bot, report_chat_id: int = None):
    one_day_list = []

    await notify_executors(bot, one_day_list)
    await notify_specialists(bot, one_day_list)

    # üìã –û—Ç—á—ë—Ç –ø–æ —Ç–µ–º, —É –∫–æ–≥–æ 1 –¥–µ–Ω—å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
    if report_chat_id and one_day_list:
        report_text = "‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å 1 –¥–Ω—ë–º –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞:\n\n" + "\n".join(one_day_list)
        await bot.send_message(chat_id=report_chat_id, text=report_text)


# üöÄ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ /test_deadlines
@router.message(F.text == "/test_deadlines")
async def test_manual_check(message: Message, bot: Bot):
    await run_deadline_check(bot, report_chat_id=message.chat.id)
    await message.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –≤—Ä—É—á–Ω—É—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
