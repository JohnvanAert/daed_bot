from aiogram import Router, F
from aiogram.types import (
    Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton,
    CallbackQuery, Document
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from database import (
    get_expert_tasks,
    update_expert_note_file,  # –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
    get_task_by_id,
    update_task_status_by_id,
    mark_order_section_done
)
import os

router = Router()

EXPERT_FILES_DIR = os.path.join("psdbot", "documents", "expert_notes")
os.makedirs(EXPERT_FILES_DIR, exist_ok=True)


class ExpertNoteFSM(StatesGroup):
    waiting_for_note_file = State()


@router.message(F.text == "üìÑ –ú–æ–∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã")
async def show_expert_tasks(message: Message):
    tasks = await get_expert_tasks(message.from_user.id)

    if not tasks:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return

    for task in tasks:
        caption = (
            f"üìå –ó–∞–∫–∞–∑: <b>{task['order_title']}</b>\n"
            f"–†–∞–∑–¥–µ–ª: <b>{task['section'].upper()}</b>\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {task['order_description']}"
        )

        buttons = []

        # –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å ‚Äî sent_to_experts
        if task['order_status'] == "sent_to_experts":
            if task['expert_note_url']:  # –∑–∞–º–µ—á–∞–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ
                buttons.append(InlineKeyboardButton(
                    text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
                    callback_data=f"approve_note:{task['task_id']}"
                ))
            else:
                buttons.append(InlineKeyboardButton(
                    text="üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è",
                    callback_data=f"send_note:{task['task_id']}"
                ))

        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons]) if buttons else None

        doc_path = f"psdbot/documents/{task['document_url']}"
        try:
            await message.answer_document(
                document=FSInputFile(doc_path),
                caption=caption,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {doc_path}")

@router.callback_query(F.data.startswith("send_note:"))
async def start_send_note(callback: CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split(":")[1])
    await state.set_state(ExpertNoteFSM.waiting_for_note_file)
    await state.update_data(task_id=task_id)
    await callback.message.answer("üìé –ü—Ä–∏—à–ª–∏—Ç–µ ZIP —Ñ–∞–π–ª —Å –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏ –ø–æ —Ä–∞–∑–¥–µ–ª—É.")
    await callback.answer()


@router.message(ExpertNoteFSM.waiting_for_note_file, F.document)
async def receive_note_file(message: Message, state: FSMContext):
    document: Document = message.document

    if not document.file_name.lower().endswith(".zip"):
        await message.answer("‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ ZIP.")
        return

    data = await state.get_data()
    task_id = data["task_id"]

    filename = f"note_{task_id}_{document.file_name}"
    save_path = os.path.join(EXPERT_FILES_DIR, filename)

    file = await message.bot.get_file(document.file_id)
    await message.bot.download_file(file.file_path, destination=save_path)

    relative_path = os.path.relpath(save_path, "psdbot")

    # üîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await update_expert_note_file(task_id, relative_path)

    await message.answer("‚úÖ –ó–∞–º–µ—á–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã.")
    await state.clear()

@router.callback_query(F.data.startswith("approve_note:"))
async def handle_approve_note(callback: CallbackQuery):
    task_id = int(callback.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
    task = await get_task_by_id(task_id)
    order_id = task["order_id"]
    section = task["section"].lower()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    await update_task_status_by_id(task_id, "approved_by_expert")

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–º –ø–æ–ª–µ <section>_status —É –∑–∞–∫–∞–∑–∞
    await mark_order_section_done(order_id, section)

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(f"‚úÖ –†–∞–∑–¥–µ–ª {section.upper()} –æ–¥–æ–±—Ä–µ–Ω —ç–∫—Å–ø–µ—Ä—Ç–æ–º.")
    await callback.answer("–û–¥–æ–±—Ä–µ–Ω–æ ‚úÖ", show_alert=True)
