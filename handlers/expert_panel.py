from aiogram import Router, F
from aiogram.types import (
    Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton,
    CallbackQuery, Document
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from database import (
    get_expert_tasks,
    update_expert_note_file,  # –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
    get_task_by_id,
    update_task_status_by_id,
    mark_order_section_done,
    update_expert_note_url,
    get_task_id_by_expert_task
)
import os
from pathlib import Path
from aiogram.filters import StateFilter
router = Router()

EXPERT_FILES_DIR = os.path.join("psdbot", "documents", "expert_notes")
os.makedirs(EXPERT_FILES_DIR, exist_ok=True)


class ExpertNoteStates(StatesGroup):
    awaiting_note_text = State()

@router.message(F.text == "üìÑ –ú–æ–∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã")
async def show_expert_tasks(message: Message):
    tasks = await get_expert_tasks(message.from_user.id)

    if not tasks:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return

    for task in tasks:
        caption = (
            f"üìå –ó–∞–∫–∞–∑: <b>{task['order_title']}</b>\n"
            f"–†–∞–∑–¥–µ–ª: <b>{task['section'].upper()}</b>\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {task['order_description']}"
        )

        buttons = [
            InlineKeyboardButton(
                text="üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è",
                callback_data=f"send_note:{task['task_id']}"
            ),
            InlineKeyboardButton(
                text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
                callback_data=f"approve_note:{task['task_id']}"
            )
        ]

        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])

        doc_path = task["document_url"]
        try:
            await message.answer_document(
                document=FSInputFile(doc_path),
                caption=caption,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {doc_path}")

@router.callback_query(F.data.startswith("send_note:"))
async def handle_send_note(callback: CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split(":")[1])

    await state.update_data(task_id=task_id)
    await callback.message.answer(
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—á–∞–Ω–∏–π –∫ –∑–∞–∫–∞–∑—É:"
    )
    await state.set_state(ExpertNoteStates.awaiting_note_text)
    await callback.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏"
     
@router.message(StateFilter(ExpertNoteStates.awaiting_note_text))
async def receive_note_text(message: Message, state: FSMContext):
    print("üü° –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞.")

    data = await state.get_data()
    task_id = data.get("task_id")
    print(f"üîß task_id –∏–∑ state: {task_id}")

    note_text = message.text

    file_path = await save_expert_note(task_id, note_text)

    if file_path is None:
        print("‚ùå save_expert_note –≤–µ—Ä–Ω—É–ª None.")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª—ë–Ω.")
        await state.clear()
        return

    print(f"üìÅ –ó–∞–º–µ—á–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–æ –ø—É—Ç–∏: {file_path}")

    await update_expert_note_url(task_id, str(file_path))
    print("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª –∑–∞–º–µ—á–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î.")

    await message.answer("‚úÖ –ó–∞–º–µ—á–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    await state.clear()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–º–µ—á–∞–Ω–∏–π –ì–ò–ü—É –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
    task = await get_task_id_by_expert_task(task_id)
    if not task:
        print("‚ùå Task –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ get_task_id_by_expert_task")
        return

    section_user_id = task.get("section_user_id")
    gip_user_id = task.get("gip_user_id")
    section = task.get("section", "").upper()
    order_title = task.get("order_title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")

    print(f"üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ –∑–∞–∫–∞–∑—É: {order_title}, —Ä–∞–∑–¥–µ–ª: {section}")
    print(f"üë§ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç ID: {section_user_id}, –ì–ò–ü ID: {gip_user_id}")

    expert_username = message.from_user.username
    expert_id = message.from_user.id

    expert_display = (
        f"@{expert_username}" if expert_username
        else f'<a href="tg://user?id={expert_id}">{message.from_user.full_name}</a>'
    )

    caption = (
        f"üìå –ó–∞–º–µ—á–∞–Ω–∏—è –ø–æ –∑–∞–∫–∞–∑—É <b>{order_title}</b>\n"
        f"–†–∞–∑–¥–µ–ª: <b>{section}</b>\n"
        f"üë∑ –≠–∫—Å–ø–µ—Ä—Ç: {expert_display}"
    )

    reply_button = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úâ –û—Ç–≤–µ—Ç–∏—Ç—å —ç–∫—Å–ø–µ—Ä—Ç—É", url=f"tg://user?id={expert_id}")]
    ])

    try:
        doc = FSInputFile(file_path)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return

    for user_id in [section_user_id, gip_user_id]:
        if user_id:
            try:
                print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                await message.bot.send_document(
                    chat_id=user_id,
                    document=doc,
                    caption=caption,
                    parse_mode="HTML",
                    reply_markup=reply_button
                )
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def save_expert_note(task_id: int, text: str) -> Path | None:
    task = await get_task_id_by_expert_task(task_id)
    
    if task is None:
        print(f"‚ùå Task with ID {task_id} not found!")
        return None

    doc_path = Path(task["document_url"])
    section = task["section"].upper()

    project_dir = doc_path.parent
    notes_dir = project_dir / "expert_notes"
    notes_dir.mkdir(exist_ok=True)

    note_file_path = notes_dir / f"{section}.txt"
    note_file_path.write_text(text, encoding="utf-8")

    return note_file_path

@router.callback_query(F.data.startswith("approve_note:"))
async def handle_approve_note(callback: CallbackQuery):
    task_id = int(callback.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
    task = await get_task_by_id(task_id)
    order_id = task["order_id"]
    section = task["section"].lower()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    await update_task_status_by_id(task_id, "approved_by_expert")

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–º –ø–æ–ª–µ <section>_status —É –∑–∞–∫–∞–∑–∞
    await mark_order_section_done(order_id, section)

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(f"‚úÖ –†–∞–∑–¥–µ–ª {section.upper()} –æ–¥–æ–±—Ä–µ–Ω —ç–∫—Å–ø–µ—Ä—Ç–æ–º.")
    await callback.answer("–û–¥–æ–±—Ä–µ–Ω–æ ‚úÖ", show_alert=True)
