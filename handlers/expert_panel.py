from aiogram import Router, F
from aiogram.types import (
    Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton,
    CallbackQuery, Document
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from database import (
    get_expert_tasks,
    get_task_by_expert_task_id,  # –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
    approve_expert_task,
    approve_task,
    mark_order_section_done,
    update_expert_note_url,
    get_task_id_by_expert_task,
    get_task_users,
    update_task_created_at_and_status,
    update_expert_task_status
)
import os
from pathlib import Path
from aiogram.filters import StateFilter
from datetime import datetime, timedelta
router = Router()

EXPERT_FILES_DIR = os.path.join("psdbot", "documents", "expert_notes")
os.makedirs(EXPERT_FILES_DIR, exist_ok=True)


class ExpertNoteStates(StatesGroup):
    awaiting_note_text = State()


@router.message(F.text == "üìÑ –¢–µ–∫—É—â–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã")
async def show_expert_tasks(message: Message):
    tasks = await get_expert_tasks(message.from_user.id, completed=False)

    if not tasks:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return

    for task in tasks:
        caption = (
            f"üìå –ó–∞–∫–∞–∑: <b>{task['order_title']}</b>\n"
            f"–†–∞–∑–¥–µ–ª: <b>{task['section'].upper()}</b>\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {task['order_description']}"
        )

    buttons = [
        InlineKeyboardButton(
            text="üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è",
            callback_data=f"send_note:{task['task_id']}"
        )
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û–¥–æ–±—Ä–∏—Ç—å", —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ "–û–¥–æ–±—Ä–µ–Ω–æ"
    if task.get("status") != "–û–¥–æ–±—Ä–µ–Ω–æ":
        buttons.append(
            InlineKeyboardButton(
                text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
                callback_data=f"approve_note:{task['task_id']}"
            )
        )
    else:
        caption += "\n\n‚úÖ <b>–†–∞–∑–¥–µ–ª —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω —ç–∫—Å–ø–µ—Ä—Ç–æ–º.</b>"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])

    doc_path = task["document_url"]
    try:
        await message.answer_document(
            document=FSInputFile(doc_path),
            caption=caption,
            parse_mode="HTML",
            reply_markup=keyboard
        )
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {doc_path}")

@router.callback_query(F.data.startswith("send_note:"))
async def handle_send_note(callback: CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split(":")[1])

    await state.update_data(task_id=task_id)
    await callback.message.answer(
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—á–∞–Ω–∏–π –∫ –∑–∞–∫–∞–∑—É:"
    )
    await state.set_state(ExpertNoteStates.awaiting_note_text)
    await callback.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏"

@router.message(StateFilter(ExpertNoteStates.awaiting_note_text))
async def receive_note_text(message: Message, state: FSMContext):

    data = await state.get_data()
    task_id = data.get("task_id")

    note_text = message.text

    file_path = await save_expert_note(task_id, note_text)
    deadline_date = (datetime.now() + timedelta(days=5)).strftime("%d.%m.%Y")
    if file_path is None:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª—ë–Ω.")
        await state.clear()
        return

    await update_task_created_at_and_status(task_id)
    await update_expert_note_url(task_id, str(file_path))
    await message.answer("‚úÖ –ó–∞–º–µ—á–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    await state.clear()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    task = await get_task_id_by_expert_task(task_id)
    if not task:
        print("‚ùå Task –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ get_task_id_by_expert_task")
        return

    section = task.get("section", "").upper()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–¥–∞—á–∏
    task_users = await get_task_users(task["task_id"])
    if not task_users:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–¥–∞—á–∏ ID {task['task_id']}")
        return

    section_user_id = task_users.get("section_user_id")
    gip_user_id = task_users.get("gip_id")
    order_title = task_users.get("order_title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫—Å–ø–µ—Ä—Ç–µ
    expert_username = message.from_user.username
    expert_id = message.from_user.id

    expert_display = (
        f"@{expert_username}" if expert_username
        else f'<a href="tg://user?id={expert_id}">{message.from_user.full_name}</a>'
    )

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
    try:
        doc = FSInputFile(file_path)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É (–±–µ–∑ –∏–º–µ–Ω–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞)
    if section_user_id:
        try:
            await message.bot.send_document(
                chat_id=section_user_id,
                document=doc,
                caption=(
                    f"üìå –ó–∞–º–µ—á–∞–Ω–∏—è –ø–æ –∑–∞–∫–∞–∑—É <b>{order_title}</b>\n"
                    f"–†–∞–∑–¥–µ–ª: <b>{section}</b>"
                    f"üìÖ –°—Ä–æ–∫ –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>–¥–æ {deadline_date}</b>"
                ),
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ì–ò–ü—É (—Å –∏–º–µ–Ω–µ–º —ç–∫—Å–ø–µ—Ä—Ç–∞ –∏ –∫–Ω–æ–ø–∫–æ–π –æ—Ç–≤–µ—Ç–∞)
    if gip_user_id:
        try:
            await message.bot.send_document(
                chat_id=gip_user_id,
                document=doc,
                caption=(
                    f"üìå –ó–∞–º–µ—á–∞–Ω–∏—è –ø–æ –∑–∞–∫–∞–∑—É <b>{order_title}</b>\n"
                    f"–†–∞–∑–¥–µ–ª: <b>{section}</b>\n"
                    f"üë∑ –≠–∫—Å–ø–µ—Ä—Ç: {expert_display}"
                ),
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úâ –û—Ç–≤–µ—Ç–∏—Ç—å —ç–∫—Å–ø–µ—Ä—Ç—É", url=f"tg://user?id={expert_id}")]
                ])
            )
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ì–ò–ü—É: {e}")

async def save_expert_note(task_id: int, text: str) -> Path | None:
    task = await get_task_id_by_expert_task(task_id)
    
    if task is None:
        print(f"‚ùå Task with ID {task_id} not found!")
        return None

    doc_path = Path(task["document_url"])
    section = task["section"].upper()

    project_dir = doc_path.parent
    notes_dir = project_dir / "expert_notes"
    notes_dir.mkdir(exist_ok=True)

    note_file_path = notes_dir / f"{section}.txt"
    note_file_path.write_text(text, encoding="utf-8")

    return note_file_path

@router.callback_query(F.data.startswith("approve_note:"))
async def handle_approve_note(callback: CallbackQuery):
    expert_task_id = int(callback.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ expert_task_id
    task = await get_task_by_expert_task_id(expert_task_id)
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    task_id = task["task_id"]
    section = task["section"].upper()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ database.py
    await approve_expert_task(expert_task_id, "–û–¥–æ–±—Ä–µ–Ω–æ")
    await approve_task(task_id, "–û–¥–æ–±—Ä–µ–Ω–æ —ç–∫—Å–ø–µ—Ä—Ç–æ–º")
    await callback.message.edit_reply_markup(reply_markup=None)

    await callback.answer("‚úÖ –†–∞–∑–¥–µ–ª –æ–¥–æ–±—Ä–µ–Ω!")

    # –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    task_users = await get_task_users(task_id)
    if not task_users:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–¥–∞—á–∏ ID {task_id}")
        return

    order_title = task_users.get("order_title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    section_user_id = task_users.get("section_user_id")
    gip_user_id = task_users.get("gip_id")

    expert_username = callback.from_user.username
    expert_id = callback.from_user.id
    expert_display = (
        f"@{expert_username}"
        if expert_username
        else f'<a href="tg://user?id={expert_id}">{callback.from_user.full_name}</a>'
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    if section_user_id:
        try:
            await callback.bot.send_message(
                chat_id=section_user_id,
                text=(
                    f"‚úÖ <b>–†–∞–∑–¥–µ–ª –æ–¥–æ–±—Ä–µ–Ω —ç–∫—Å–ø–µ—Ä—Ç–æ–º</b>\n"
                    f"üìå –ó–∞–∫–∞–∑: <b>{order_title}</b>\n"
                    f"–†–∞–∑–¥–µ–ª: <b>{section}</b>"
                ),
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É: {e}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ì–ò–ü–∞
    if gip_user_id:
        try:
            await callback.bot.send_message(
                chat_id=gip_user_id,
                text=(
                    f"‚úÖ <b>–≠–∫—Å–ø–µ—Ä—Ç –æ–¥–æ–±—Ä–∏–ª —Ä–∞–∑–¥–µ–ª</b>\n"
                    f"üìå –ó–∞–∫–∞–∑: <b>{order_title}</b>\n"
                    f"–†–∞–∑–¥–µ–ª: <b>{section}</b>\n"
                    f"üë∑ –≠–∫—Å–ø–µ—Ä—Ç: {expert_display}"
                ),
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚úâ –°–≤—è–∑–∞—Ç—å—Å—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º", url=f"tg://user?id={expert_id}")
                ]])
            )
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ì–ò–ü—É: {e}")


@router.message(F.text == "üìÅ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã")
async def show_completed_expert_tasks(message: Message):
    tasks = await get_expert_tasks(message.from_user.id, completed=True)

    if not tasks:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–∏–∑.")
        return

    for task in tasks:
        caption = (
            f"üìå –ó–∞–∫–∞–∑: <b>{task['order_title']}</b>\n"
            f"–†–∞–∑–¥–µ–ª: <b>{task['section'].upper()}</b>\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {task['order_description']}"
        )

        # –î–ª—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–∏–∑ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –º–æ–∂–Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å,
        # –Ω–æ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è"
        buttons = []
        if task.get("expert_note_url"):
            buttons.append(
                InlineKeyboardButton(
                    text="üìé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è",
                    callback_data=f"view_note:{task['task_id']}"
                )
            )

        caption += "\n\n‚úÖ <b>–†–∞–∑–¥–µ–ª –∑–∞–≤–µ—Ä—à—ë–Ω.</b>"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons]) if buttons else None

        try:
            await message.answer_document(
                document=FSInputFile(task["document_url"]),
                caption=caption,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        except:
            await message.answer(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {task['document_url']}")
