from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from database import get_user_by_telegram_id, assign_specialist_to_section, search_specialists_by_name
from states.assign_states import AssignSpecialist
from keyboards.main_menu import send_main_menu

router = Router()

SECTIONS = ["–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤", "–í–ö", "–û–í–∏–ö", "–≠–û–ú", "–ì–ü", "–°–º–µ—Ç—ã"]

@router.message(F.text == "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
async def gip_manage(message: Message, state: FSMContext):
    user = await get_user_by_telegram_id(message.from_user.id)
    if user and user["role"] == "–≥–∏–ø":
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=section)] for section in SECTIONS],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:", reply_markup=kb)
        await state.set_state(AssignSpecialist.choosing_section)

@router.message(AssignSpecialist.choosing_section)
async def enter_specialist_name(message: Message, state: FSMContext):
    section = message.text
    if section not in SECTIONS:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return

    await state.update_data(section=section)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(AssignSpecialist.entering_specialist_name)

@router.message(AssignSpecialist.entering_specialist_name)
async def search_specialist(message: Message, state: FSMContext):
    query = message.text.strip()
    matches = await search_specialists_by_name(query)

    if not matches:
        await message.answer("‚ùå –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(found_specialists=matches)

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=spec["full_name"])] for spec in matches],
        resize_keyboard=True
    )
    await message.answer("üîç –ù–∞–π–¥–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=kb)
    await state.set_state(AssignSpecialist.confirming_specialist)

@router.message(AssignSpecialist.confirming_specialist)
async def confirm_specialist(message: Message, state: FSMContext):
    selected_name = message.text
    data = await state.get_data()
    matches = data.get("found_specialists", [])
    section = data.get("section")

    chosen = next((s for s in matches if s["full_name"] == selected_name), None)
    if not chosen:
        await message.answer("‚ùó –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await assign_specialist_to_section(section, chosen["telegram_id"])
    await message.answer(
        f"‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç <b>{selected_name}</b> –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —Ä–∞–∑–¥–µ–ª <b>{section}</b>.",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()
    await send_main_menu(message, role="–≥–∏–ø")
