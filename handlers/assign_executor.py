from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from states.states import AssignExecutor
from database import get_all_executors, assign_executor_to_section, get_specialist_sections
from keyboards.main_menu import send_main_menu

router = Router()
SECTIONS = ["–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤", "–í–ö", "–û–í–∏–ö", "–≠–û–ú", "–ì–ü", "–°–º–µ—Ç—ã"]
@router.message(F.text == "üë• –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
async def choose_section_for_executor(message: Message, state: FSMContext):
    sections = await get_specialist_sections(message.from_user.id)

    if not sections:
        await message.answer("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=section, callback_data=f"assign_section:{section}")]
                         for section in SECTIONS]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("assign_section:"))
async def process_section_callback(callback: CallbackQuery, state: FSMContext):
    section = callback.data.split(":")[1]
    await state.update_data(section=section)
    await callback.message.edit_text(f"–†–∞–∑–¥–µ–ª: <b>{section}</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(AssignExecutor.entering_executor_name)

@router.message(AssignExecutor.entering_executor_name)
async def search_executor(message: Message, state: FSMContext):
    query = message.text.strip()
    matches = await get_all_executors(query)

    if not matches:
        await message.answer("‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(found_executors=matches)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=ex["full_name"], callback_data=f"assign_exec:{ex['telegram_id']}")]
                         for ex in matches]
    )
    await message.answer("üîç –ù–∞–π–¥–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=kb)
    await state.set_state(AssignExecutor.confirming_executor)

@router.callback_query(F.data.startswith("assign_exec:"))
async def confirm_executor(callback: CallbackQuery, state: FSMContext):
    executor_id = int(callback.data.split(":")[1])
    data = await state.get_data()
    section = data.get("section")
    specialist_id = callback.from_user.id
    matches = data.get("found_executors", [])

    chosen = next((e for e in matches if e["telegram_id"] == executor_id), None)
    if not chosen:
        await callback.message.answer("‚ùó –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await assign_executor_to_section(section, specialist_id, executor_id)
    await callback.message.edit_text(
        f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å <b>{chosen['full_name']}</b> –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —Ä–∞–∑–¥–µ–ª <b>{section}</b>."
    )
    await state.clear()
    await send_main_menu(callback.message, role="—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç")