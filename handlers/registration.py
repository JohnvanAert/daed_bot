from aiogram import Router
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from database import add_user
from states.registration_states import RegisterState
from keyboards.main_menu import send_main_menu

router = Router()


@router.message(RegisterState.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ò–ù (12 —Ü–∏—Ñ—Ä):")
    await state.set_state(RegisterState.waiting_for_iin)


@router.message(RegisterState.waiting_for_iin)
async def process_iin(message: Message, state: FSMContext):
    iin = message.text.strip()
    if not iin.isdigit() or len(iin) != 12:
        await message.answer("‚ùóÔ∏è –ò–ò–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 12 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(iin=iin)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:")
    await state.set_state(RegisterState.waiting_for_address)


@router.message(RegisterState.waiting_for_address)
async def process_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞:")
    await state.set_state(RegisterState.waiting_for_bank)


@router.message(RegisterState.waiting_for_bank)
async def process_bank(message: Message, state: FSMContext):
    await state.update_data(bank=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ò–ö/IBAN:")
    await state.set_state(RegisterState.waiting_for_iban)


@router.message(RegisterState.waiting_for_iban)
async def process_iban(message: Message, state: FSMContext):
    await state.update_data(iban=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ë–ò–ö:")
    await state.set_state(RegisterState.waiting_for_bik)


@router.message(RegisterState.waiting_for_bik)
async def process_bik(message: Message, state: FSMContext):
    await state.update_data(bik=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —ç–ª. –ø–æ—á—Ç—É:")
    await state.set_state(RegisterState.waiting_for_email)


@router.message(RegisterState.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    await state.update_data(email=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
    await state.set_state(RegisterState.waiting_for_phone)


@router.message(RegisterState.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    await state.update_data(phone=phone)

    data = await state.get_data()
    full_name = data["full_name"]
    iin = data["iin"]
    role = "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"

    await add_user(
        telegram_id=message.from_user.id,
        full_name=full_name,
        iin=iin,
        role=role,
        address=data["address"],
        bank=data["bank"],
        iban=data["iban"],
        bik=data["bik"],
        kbe="19",   # üëà –ö–ë–ï –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        email=data["email"],
        phone=phone
    )

    await message.answer(
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"<b>–ò–º—è:</b> {full_name}\n"
        f"<b>–ò–ò–ù:</b> {iin}\n"
        f"<b>–†–æ–ª—å:</b> {role.capitalize()}\n\n"
        f"<b>–ê–¥—Ä–µ—Å:</b> {data['address']}\n"
        f"<b>–ë–∞–Ω–∫:</b> {data['bank']}\n"
        f"<b>–ò–ò–ö:</b> {data['iban']}\n"
        f"<b>–ë–ò–ö:</b> {data['bik']}\n"
        f"<b>Email:</b> {data['email']}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}",
        reply_markup=ReplyKeyboardRemove()
    )

    await state.clear()
    await send_main_menu(message, role)
