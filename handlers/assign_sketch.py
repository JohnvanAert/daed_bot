from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import get_order_by_id, get_specialist_by_section, get_customer_telegram_id, get_all_orders
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram import Bot
import os

router = Router()

class AssignSketchFSM(StatesGroup):
    waiting_for_deadline = State()
    waiting_for_comment = State()

@router.callback_query(F.data.startswith("assign_sketch:"))
async def ask_deadline(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.set_state(AssignSketchFSM.waiting_for_deadline)
    await state.update_data(order_id=order_id)
    await callback.answer()
    await callback.message.answer("üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ –¥–Ω—è—Ö –¥–ª—è —ç—Å–∫–∏–∑—á–∏–∫–∞:")

@router.message(AssignSketchFSM.waiting_for_deadline)
async def receive_deadline(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω —á–∏—Å–ª–æ–º (–≤ –¥–Ω—è—Ö):")
        return

    await state.update_data(deadline=int(message.text))
    await state.set_state(AssignSketchFSM.waiting_for_comment)
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —ç—Å–∫–∏–∑—á–∏–∫–∞:")

@router.message(AssignSketchFSM.waiting_for_comment)
async def send_to_sketch_specialist(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data["order_id"]
    deadline = data["deadline"]
    comment = message.text.strip()

    order = await get_order_by_id(order_id)
    specialist_id = await get_specialist_by_section("—ç–ø")

    if not specialist_id:
        await message.answer("‚ùó –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ä–∞–∑–¥–µ–ª—É –≠–ü –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.")
        await state.clear()
        return

    doc_path = os.path.abspath(os.path.join("..", "clientbot", order["document_url"]))
    if not os.path.exists(doc_path):
        await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–∫–∞–∑–∞.")
        await state.clear()
        return

    caption = (
        f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≠–ü:"
        f"üìå <b>{order['title']}</b>"
        f"üìù {order['description']}"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω: {deadline} –¥–Ω–µ–π"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ì–ò–ü–∞: {comment}"
    )

    await message.bot.send_document(
        chat_id=specialist_id,
        document=FSInputFile(doc_path),
        caption=caption,
        parse_mode=ParseMode.HTML
    )

    await message.answer("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω —ç—Å–∫–∏–∑—á–∏–∫—É.")
    await state.clear()
