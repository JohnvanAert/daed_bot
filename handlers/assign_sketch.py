from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
import os
from database import get_order_by_id, get_specialist_by_section, create_task
from datetime import date, timedelta
import tempfile
import shutil

router = Router()

class AssignSketchFSM(StatesGroup):
    waiting_for_deadline = State()
    waiting_for_comment = State()

@router.callback_query(F.data.startswith("assign_sketch:"))
async def ask_deadline(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.set_state(AssignSketchFSM.waiting_for_deadline)
    await state.update_data(order_id=order_id)
    await callback.answer()
    await callback.message.answer("üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ –¥–Ω—è—Ö –¥–ª—è —ç—Å–∫–∏–∑—á–∏–∫–∞:")

@router.message(AssignSketchFSM.waiting_for_deadline)
async def receive_deadline(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–¥–µ–¥–ª–∞–π–Ω –≤ –¥–Ω—è—Ö):")
        return
    await state.update_data(deadline=int(message.text))
    await state.set_state(AssignSketchFSM.waiting_for_comment)
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —ç—Å–∫–∏–∑—á–∏–∫–∞:")

@router.message(AssignSketchFSM.waiting_for_comment)
async def send_to_ep_specialist(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data["order_id"]
    deadline_days = data["deadline"]
    comment = message.text.strip()

    order = await get_order_by_id(order_id)
    specialist = await get_specialist_by_section("—ç–ø")

    if not specialist:
        await message.answer("‚ùó –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –≠–ü –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    deadline_date = date.today() + timedelta(days=deadline_days)
    await create_task(order_id, "—ç–ø", comment, deadline_date, specialist["telegram_id"], "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≠–ü")

    # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
    doc_path = os.path.abspath(os.path.join("..", "psdbot", order["document_url"]))

    if not os.path.exists(doc_path):
        await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–∫–∞–∑–∞.")
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å–ª–∏ —ç—Ç–æ –ø–∞–ø–∫–∞ ‚Äî –∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º
    if os.path.isdir(doc_path):
        temp_dir = tempfile.gettempdir()
        zip_name = f"{order['title'].replace(' ', '_')}_for_EP.zip"
        zip_path = os.path.join(temp_dir, zip_name)

        try:
            shutil.make_archive(base_name=zip_path.replace(".zip", ""), format='zip', root_dir=doc_path)
        except Exception as e:
            await message.answer(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {e}")
            await state.clear()
            return
    else:
        zip_path = doc_path  # –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–∞–ø–∫–∞, —Ç–æ —Å—Ä–∞–∑—É –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É

    caption = (
        f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≠–ü:\n"
        f"üìå <b>{order['title']}</b>\n"
        f"üìù {order['description']}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω: {deadline_days} –¥–Ω–µ–π\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ì–ò–ü–∞: {comment}"
    )

    try:
        await message.bot.send_document(
            chat_id=specialist["telegram_id"],
            document=FSInputFile(zip_path),
            caption=caption,
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        await message.answer(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await state.clear()
        return
    finally:
        # –£–¥–∞–ª–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π .zip —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
        if os.path.isdir(doc_path) and os.path.exists(zip_path):
            os.remove(zip_path)

    await message.answer("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ –≠–ü.")
    await state.clear()