from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from database import get_all_users_sorted_by_id, update_user_field, move_user_to_experts, archive_user_by_id, get_active_users_sorted_by_id,get_archived_users_sorted_by_id, restore_user

router = Router()

USERS_PER_PAGE = 5

class EditUserFSM(StatesGroup):
    waiting_for_new_value = State()

# ====== –°—Ç–∞—Ä—Ç –ø–∞–Ω–µ–ª–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ======
@router.message(F.text == "‚öôÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def edit_users_main(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏/–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã", callback_data="edit_type:users")],
        [InlineKeyboardButton(text="üì¶ –ó–∞–∫–∞–∑—á–∏–∫–∏", callback_data="edit_type:customers")],
        [InlineKeyboardButton(text="üéì –≠–∫—Å–ø–µ—Ä—Ç—ã", callback_data="edit_type:experts")]
    ])
    await message.answer("–ö–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=kb)


@router.callback_query(F.data == "edit_type:users")
async def edit_users_list(callback: CallbackQuery):
    await show_users_page(callback.message, page=0, edit=True)
    await callback.answer()
    
# üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü
@router.callback_query(F.data.startswith("users_page:"))
async def paginate_users(callback: CallbackQuery):
    page = int(callback.data.split(":")[1])
    await show_users_page(callback.message, page, edit=True)
    await callback.answer()

async def show_users_page(message: Message, page: int, edit=False):
    users = await get_active_users_sorted_by_id()
    await show_page_common(message, page, users, edit, is_archive=False)


@router.callback_query(F.data.startswith("archive_page:"))
async def paginate_archived_users(callback: CallbackQuery):
    page = int(callback.data.split(":")[1])
    await show_archived_users_page(callback.message, page, edit=True)
    await callback.answer()

# üìã –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞—Ä—Ö–∏–≤–∞
async def show_archived_users_page(message: Message, page: int, edit=False):
    users = await get_archived_users_sorted_by_id()
    await show_page_common(message, page, users, edit, is_archive=True)

# üìã –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def show_page_common(message: Message, page: int, users, edit, is_archive=False):
    total_pages = (len(users) - 1) // USERS_PER_PAGE + 1

    start_idx = page * USERS_PER_PAGE
    end_idx = start_idx + USERS_PER_PAGE
    page_users = users[start_idx:end_idx]

    if not page_users:
        text = "‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        if edit:
            await message.edit_text(text)
        else:
            await message.answer(text)
        return

    kb_buttons = []
    for u in page_users:
        text_btn = f"üÜî{u['id']} {u['full_name']}"
        cb_data = f"{'restore' if is_archive else 'edit_user'}:{u['id']}"
        kb_buttons.append([InlineKeyboardButton(text=text_btn, callback_data=cb_data)])

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
            callback_data=f"{'archive_page' if is_archive else 'users_page'}:{page - 1}"
        ))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(
            text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è",
            callback_data=f"{'archive_page' if is_archive else 'users_page'}:{page + 1}"
        ))
    if nav_buttons:
        kb_buttons.append(nav_buttons)
    
    if not is_archive:
        kb_buttons.append([
            InlineKeyboardButton(text="üìÅ –ê—Ä—Ö–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="archive_page:0")
        ])

    kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
    title = "üìÅ –ê—Ä—Ö–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" if is_archive else "üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
    text = f"{title}\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ <b>{page + 1}</b> –∏–∑ <b>{total_pages}</b>"

    if edit:
        await message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    else:
        await message.answer(text, reply_markup=kb, parse_mode="HTML")

# üõ† –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("edit_user:"))
async def select_user_to_edit(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split(":")[1])
    await state.update_data(edit_user_id=user_id)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", callback_data="edit_field:full_name")],
        [InlineKeyboardButton(text="üÜî –ò–∑–º–µ–Ω–∏—Ç—å –ò–ò–ù", callback_data="edit_field:iin")],
        [InlineKeyboardButton(text="üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_field:phone")],
        [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="edit_role")],
        [InlineKeyboardButton(text="üõ† –ò–∑–º–µ–Ω–∏—Ç—å —Å–µ–∫—Ü–∏—é", callback_data="edit_section")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="delete_user")]
    ])
    await callback.message.edit_text(
        f"üîß –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID <b>{user_id}</b>?",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await callback.answer()

# üî• –ò–∑–º–µ–Ω—è–µ–º —Ä–æ–ª—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
@router.callback_query(F.data == "edit_role")
async def choose_role(callback: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", callback_data="set_role:–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")],
        [InlineKeyboardButton(text="üõ† –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", callback_data="set_role:—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç")],
        [InlineKeyboardButton(text="üéì –≠–∫—Å–ø–µ—Ä—Ç", callback_data="set_role:—ç–∫—Å–ø–µ—Ä—Ç")]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=kb)
    await callback.answer()

# üèó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å
@router.callback_query(F.data.startswith("set_role:"))
async def set_role(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data["edit_user_id"]
    new_role = callback.data.split(":")[1]

    if new_role == "—ç–∫—Å–ø–µ—Ä—Ç":
        await move_user_to_experts(user_id)
        await callback.message.edit_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ —Ç–∞–±–ª–∏—Ü—É —ç–∫—Å–ø–µ—Ä—Ç–æ–≤.")
    else:
        await update_user_field(user_id, "role", new_role)
        await callback.message.edit_text(f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ <b>{new_role}</b>.", parse_mode="HTML")
    await state.clear()
    await callback.answer()

# üî• –ò–∑–º–µ–Ω—è–µ–º —Å–µ–∫—Ü–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
@router.callback_query(F.data == "edit_section")
async def choose_section(callback: CallbackQuery, state: FSMContext):
    sections = ["—ç–ø", "–∞—Ä", "–∫–∂", "–≥–ø", "—Ä—Å", "—Å—Å", "–æ–≤–∏–∫", "–≥—Å", "–≤–∫", "—ç–æ–º"]
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=sec.upper(), callback_data=f"set_section:{sec}")] for sec in sections
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=kb)
    await callback.answer()

# üèó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–∫—Ü–∏—é
@router.callback_query(F.data.startswith("set_section:"))
async def set_section(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data["edit_user_id"]
    new_section = callback.data.split(":")[1]
    await update_user_field(user_id, "section", new_section)
    await callback.message.edit_text(f"‚úÖ –°–µ–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ <b>{new_section.upper()}</b>.", parse_mode="HTML")
    await state.clear()
    await callback.answer()

# ‚úèÔ∏è –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
@router.callback_query(F.data.startswith("edit_field:"))
async def ask_new_value(callback: CallbackQuery, state: FSMContext):
    field = callback.data.split(":")[1]
    await state.update_data(edit_field=field)
    await state.set_state(EditUserFSM.waiting_for_new_value)
    await callback.message.edit_text(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è <b>{field}</b>:",
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "delete_user")
async def archive_user(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data["edit_user_id"]

    await archive_user_by_id(user_id)
    await callback.message.edit_text(
        f"üì¶ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <b>{user_id}</b> –±—ã–ª –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ –∞—Ä—Ö–∏–≤.",
        parse_mode="HTML"
    )
    await state.clear()
    await callback.answer("–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ ‚úÖ")

# ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
@router.message(EditUserFSM.waiting_for_new_value)
async def update_user_value(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data["edit_user_id"]
    field = data["edit_field"]
    new_value = message.text.strip()

    allowed_fields = {"full_name", "iin", "phone", "role", "section"}
    if field not in allowed_fields:
        await message.answer("üö´ –ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ –ø–æ–ª–µ.")
        await state.clear()
        return

    await update_user_field(user_id, field, new_value)
    await message.answer(f"‚úÖ –ü–æ–ª–µ <b>{field}</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}.", parse_mode="HTML")
    await state.clear()


@router.callback_query(F.data.startswith("restore:"))
async def restore_user_callback(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    await restore_user(user_id)
    await callback.message.edit_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    await callback.answer("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚úÖ")