from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import get_order_by_id, get_customer_telegram_id, get_specialist_by_section, update_order_status, create_task
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import FSInputFile
import os
from aiogram.types import Document
from datetime import date, timedelta
from dotenv import load_dotenv
from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

load_dotenv()
router = Router()
# Initialize the client bot with the token from environment variables
client_bot = Bot(
    token=os.getenv("CLIENT_BOT_TOKEN"),
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
class ReviewCorrectionFSM(StatesGroup):
    waiting_for_comment = State()
    waiting_for_fixed_file = State()
    waiting_for_customer_question = State()
    waiting_for_customer_zip = State()
    waiting_for_customer_error_comment = State()

@router.callback_query(F.data.startswith("gip_approve:"))
async def handle_gip_approval(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    order = await get_order_by_id(order_id)
    customer_id = await get_customer_telegram_id(order["customer_id"])
    await update_order_status(order_id, "receive_ird")
    ep_file_path = os.path.abspath(os.path.join("..", "clientbot", order["document_url"]))
    
    if os.path.exists(ep_file_path):
        caption = (
            f"üì¶ –ü–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É <b>{order['title']}</b> –≤—ã–ø–æ–ª–Ω–µ–Ω —Ä–∞–∑–¥–µ–ª –≠–ü.\n"
            f"üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n"
            f"üî∑ –ì–ü–ó–£\nüî∑ –¢–£\nüî∑ –ü–î–ü"
        )

        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ client_bot
        await client_bot.send_document(
            chat_id=customer_id,
            document=FSInputFile(ep_file_path),
            caption=caption
        )
    else:
        await callback.message.answer("‚ùó –§–∞–π–ª –≠–ü –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await callback.message.edit_reply_markup()
    await callback.message.answer("‚úÖ –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –∑–∞–∫–∞–∑—á–∏–∫—É.")
    await callback.answer("–ü–µ—Ä–µ–¥–∞–Ω–æ –∑–∞–∫–∞–∑—á–∏–∫—É ‚úÖ", show_alert=True)

@router.callback_query(F.data.startswith("gip_reject:"))
async def handle_gip_rejection(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.set_state(ReviewCorrectionFSM.waiting_for_comment)
    await state.update_data(order_id=order_id)
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("‚ùó –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏ –ø–æ –≠–ü:")

@router.message(ReviewCorrectionFSM.waiting_for_comment)
async def send_correction_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data["order_id"]
    comment = message.text.strip()
    order = await get_order_by_id(order_id)

    specialist = await get_specialist_by_section("—ç–ø")
    if not specialist:
        await message.answer("‚ùó –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª", callback_data=f"resubmit_ep:{order['id']}")]
    ])
    await message.bot.send_message(
        chat_id=specialist["telegram_id"],
        text=(
            f"‚ùó <b>–ó–∞–º–µ—á–∞–Ω–∏—è –ø–æ –≠–ü</b> –ø–æ –∑–∞–∫–∞–∑—É: <b>{order['title']}</b>\n\n"
            f"{comment}"
        ),
        parse_mode="HTML",
        reply_markup=keyboard
    )

    await message.answer("‚úâÔ∏è –ó–∞–º–µ—á–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.")
    await state.clear()


@router.callback_query(F.data.startswith("resubmit_ep:"))
async def handle_resubmit_ep(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.set_state(ReviewCorrectionFSM.waiting_for_fixed_file)
    await state.update_data(order_id=order_id)
    await callback.message.answer("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π PDF —Ñ–∞–π–ª –≠–ü:")
    await callback.answer()

@router.message(ReviewCorrectionFSM.waiting_for_fixed_file, F.document)
async def receive_fixed_ep(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data["order_id"]
    order = await get_order_by_id(order_id)

    document: Document = message.document
    if not document.file_name.lower().endswith(".pdf"):
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.")
        return

    # –û—Ç–ø—Ä–∞–≤–∏–º –ì–ò–ü—É
    await message.bot.send_document(
        chat_id=order["gip_id"],
        document=document,
        caption=f"üì© –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≠–ü –ø–æ –∑–∞–∫–∞–∑—É: <b>{order['title']}</b>",
        parse_mode="HTML"
    )

    await message.answer("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ì–ò–ü—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
    await state.clear()


@router.callback_query(F.data.startswith("docs_error:"))
async def handle_docs_error(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.set_state(ReviewCorrectionFSM.waiting_for_customer_error_comment)
    await state.update_data(order_id=order_id)
    await callback.message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞ (—á—Ç–æ –Ω–µ —Ç–∞–∫ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏):")
    await callback.answer()

@router.message(ReviewCorrectionFSM.waiting_for_customer_error_comment)
async def send_docs_error_to_customer(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data["order_id"]
    order = await get_order_by_id(order_id)
    customer_id = await get_customer_telegram_id(order["customer_id"])

    comment = message.text.strip()

    # üîÑ –û–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    await update_order_status(order_id, "pending_correction")

    await client_bot.send_message(
        chat_id=customer_id,
        text=(
            f"‚ùó <b>–û—à–∏–±–∫–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö</b> –ø–æ –∑–∞–∫–∞–∑—É <b>{order['title']}</b>:\n\n"
            f"{comment}"
        ),
        parse_mode="HTML"
    )

    await message.answer("‚úâÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑—á–∏–∫—É.")
    await state.clear()


@router.callback_query(F.data.startswith("docs_accept:"))
async def handle_docs_accept(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])

    # –û–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: ep_documents_accepted
    await update_order_status(order_id, "ep_documents_accepted")

    # –ò–∑–º–µ–Ω–∏–º caption –∏ –∫–Ω–æ–ø–∫—É
    original_caption = callback.message.caption or ""
    updated_caption = original_caption + "\n\n‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç—ã. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∑–∞–∫–∞–∑ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ –ê–†."

    new_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–¥–∞—Ç—å –ê–†", callback_data=f"assign_ar:{order_id}")]
    ])

    await callback.message.edit_caption(caption=updated_caption, reply_markup=new_keyboard)
    await callback.answer("–î–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã ‚úÖ", show_alert=True)


@router.message(ReviewCorrectionFSM.waiting_for_customer_zip, F.document)
async def receive_customer_zip(message: Message, state: FSMContext):
    document = message.document

    if not document.file_name.lower().endswith(".zip"):
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .zip")
        return

    data = await state.get_data()
    order = await get_order_by_id(data["order_id"])

    for user_id in [order["gip_id"], (await get_specialist_by_section("—ç–ø"))["telegram_id"]]:
        await message.bot.send_document(
            chat_id=user_id,
            document=document.file_id,  # <-- –≤–∞–∂–Ω–æ: –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è document.file_id
            caption=f"üì• –ü–æ–ª—É—á–µ–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑—É: <b>{order['title']}</b>",
            parse_mode="HTML"
        )
    
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! ZIP-—Ñ–∞–π–ª –ø–µ—Ä–µ–¥–∞–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º.")
    await state.clear()

@router.callback_query(F.data.startswith("docs_error:"))
async def handle_docs_error(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.set_state(ReviewCorrectionFSM.waiting_for_customer_error_comment)
    await state.update_data(order_id=order_id)
    await callback.message.answer("‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω–µ —Ç–∞–∫ —Å –ò–†–î:")
    await callback.answer()


@router.message(ReviewCorrectionFSM.waiting_for_customer_error_comment)
async def handle_docs_error_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data["order_id"]
    order = await get_order_by_id(order_id)
    customer_id = await get_customer_telegram_id(order["customer_id"])

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìé –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ò–†–î", callback_data=f"send_ird:{order_id}")]
    ])

    await client_bot.send_message(
        chat_id=customer_id,
        text=f"‚ùó <b>–û—à–∏–±–∫–∞ –≤ –ò–†–î</b> –ø–æ –∑–∞–∫–∞–∑—É <b>{order['title']}</b>:\n\n{message.text.strip()}",
        parse_mode="HTML",
        reply_markup=keyboard
    )

    await message.answer("‚úâÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑—á–∏–∫—É.")
    await state.clear()


@router.callback_query(F.data.startswith("assign_ar:"))
async def handle_assign_ar(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    order = await get_order_by_id(order_id)
    specialist = await get_specialist_by_section("–∞—Ä")

    if not specialist:
        await callback.message.answer("‚ùó –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ê–† –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    deadline = date.today() + timedelta(days=5)

    await create_task(
        order_id=order_id,
        section="–∞—Ä",
        description=order["description"],
        deadline=deadline,
        specialist_id=specialist["telegram_id"],
        status="–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ê–†"
    )

    doc_path = os.path.abspath(os.path.join("..", "clientbot", order["document_url"]))
    if not os.path.exists(doc_path):
        await callback.message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –∑–∞–∫–∞–∑–∞.")
        return

    caption = (
        f"üìÑ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –ê–†:\n"
        f"üìå <b>{order['title']}</b>\n"
        f"üìù {order['description']}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω: {deadline.strftime('%d.%m.%Y')}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –ü–µ—Ä–µ–¥–∞–Ω –∑–∞–∫–∞–∑ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –ê–†"
    )

    await callback.bot.send_document(
        chat_id=specialist["telegram_id"],
        document=FSInputFile(doc_path),
        caption=caption,
        parse_mode="HTML"
    )

    await callback.message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ –ê–†.")
    await callback.answer("–ü–µ—Ä–µ–¥–∞–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ –ê–† ‚úÖ", show_alert=True)
