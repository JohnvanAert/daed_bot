from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import get_order_by_id, get_customer_telegram_id, get_specialist_by_section, update_order_status, create_task, get_specialist_by_order_and_section, get_ar_task_document, update_task_status, save_kj_file_path_to_tasks, get_ovik_task_document, get_eom_task_document, get_ss_task_document, get_kj_task_document, get_vk_task_document, get_task_document_by_section, get_all_experts
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import FSInputFile
import os
from aiogram.types import Document
from datetime import date, timedelta, datetime
from dotenv import load_dotenv
from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from states.ar_correction import ReviewArCorrectionFSM
import shutil
from states.task_states import AssignARFSM, AssignKJFSM, ReviewKjCorrectionFSM, AssignOVIKFSM, ReviewOvikCorrectionFSM, AssignGSFSM, ReviewGSCorrectionFSM, AssignVKFSM, ReviewVkCorrectionFSM, AssignEOMFSM, ReviewEomCorrectionFSM, AssignSSFSM, ReviewSSCorrectionFSM

load_dotenv()
EXPERT_API_TOKEN = os.getenv("EXPERT_BOT_TOKEN")  
router = Router()
# Initialize the client bot with the token from environment variables
client_bot = Bot(
    token=os.getenv("CLIENT_BOT_TOKEN"),
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
class ReviewCorrectionFSM(StatesGroup):
    waiting_for_comment = State()
    waiting_for_fixed_file = State()
    waiting_for_customer_question = State()
    waiting_for_customer_zip = State()
    waiting_for_customer_error_comment = State()

@router.callback_query(F.data.startswith("gip_approve:"))
async def handle_gip_approval(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    order = await get_order_by_id(order_id)
    customer_id = await get_customer_telegram_id(order["customer_id"])
    await update_order_status(order_id, "receive_ird")
    ep_file_path = os.path.abspath(os.path.join("..", "psdbot", order["document_url"]))
    
    if os.path.exists(ep_file_path):
        caption = (
            f"üì¶ –ü–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É <b>{order['title']}</b> –≤—ã–ø–æ–ª–Ω–µ–Ω —Ä–∞–∑–¥–µ–ª –≠–ü.\n"
            f"üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n"
            f"üî∑ –ì–ü–ó–£\nüî∑ –¢–£\nüî∑ –ü–î–ü"
        )

        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ client_bot
        await client_bot.send_document(
            chat_id=customer_id,
            document=FSInputFile(ep_file_path),
            caption=caption
        )
    else:
        await callback.message.answer("‚ùó –§–∞–π–ª –≠–ü –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await callback.message.edit_reply_markup()
    await callback.message.answer("‚úÖ –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –∑–∞–∫–∞–∑—á–∏–∫—É.")
    await callback.answer("–ü–µ—Ä–µ–¥–∞–Ω–æ –∑–∞–∫–∞–∑—á–∏–∫—É ‚úÖ", show_alert=True)

@router.callback_query(F.data.startswith("gip_reject:"))
async def handle_gip_rejection(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.set_state(ReviewCorrectionFSM.waiting_for_comment)
    await state.update_data(order_id=order_id)
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("‚ùó –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏ –ø–æ –≠–ü:")

@router.message(ReviewCorrectionFSM.waiting_for_comment)
async def send_correction_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data["order_id"]
    comment = message.text.strip()
    order = await get_order_by_id(order_id)

    specialist = await get_specialist_by_section("—ç–ø")
    if not specialist:
        await message.answer("‚ùó –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª", callback_data=f"resubmit_ep:{order['id']}")]
    ])
    await message.bot.send_message(
        chat_id=specialist["telegram_id"],
        text=(
            f"‚ùó <b>–ó–∞–º–µ—á–∞–Ω–∏—è –ø–æ –≠–ü</b> –ø–æ –∑–∞–∫–∞–∑—É: <b>{order['title']}</b>\n\n"
            f"{comment}"
        ),
        parse_mode="HTML",
        reply_markup=keyboard
    )

    await message.answer("‚úâÔ∏è –ó–∞–º–µ—á–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.")
    await state.clear()


@router.callback_query(F.data.startswith("resubmit_ep:"))
async def handle_resubmit_ep(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.set_state(ReviewCorrectionFSM.waiting_for_fixed_file)
    await state.update_data(order_id=order_id)
    await callback.message.answer("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π PDF —Ñ–∞–π–ª –≠–ü:")
    await callback.answer()

@router.message(ReviewCorrectionFSM.waiting_for_fixed_file, F.document)
async def receive_fixed_ep(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data["order_id"]
    order = await get_order_by_id(order_id)

    document: Document = message.document
    if not document.file_name.lower().endswith(".pdf"):
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.")
        return

    # –û—Ç–ø—Ä–∞–≤–∏–º –ì–ò–ü—É
    await message.bot.send_document(
        chat_id=order["gip_id"],
        document=document,
        caption=f"üì© –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≠–ü –ø–æ –∑–∞–∫–∞–∑—É: <b>{order['title']}</b>",
        parse_mode="HTML"
    )

    await message.answer("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ì–ò–ü—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
    await state.clear()


@router.callback_query(F.data.startswith("docs_error:"))
async def handle_docs_error(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.set_state(ReviewCorrectionFSM.waiting_for_customer_error_comment)
    await state.update_data(order_id=order_id)
    await callback.message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞ (—á—Ç–æ –Ω–µ —Ç–∞–∫ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏):")
    await callback.answer()

@router.message(ReviewCorrectionFSM.waiting_for_customer_error_comment)
async def send_docs_error_to_customer(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data["order_id"]
    order = await get_order_by_id(order_id)
    customer_id = await get_customer_telegram_id(order["customer_id"])

    comment = message.text.strip()

    # üîÑ –û–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    await update_order_status(order_id, "pending_correction")

    await client_bot.send_message(
        chat_id=customer_id,
        text=(
            f"‚ùó <b>–û—à–∏–±–∫–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö</b> –ø–æ –∑–∞–∫–∞–∑—É <b>{order['title']}</b>:\n\n"
            f"{comment}"
        ),
        parse_mode="HTML"
    )

    await message.answer("‚úâÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑—á–∏–∫—É.")
    await state.clear()


@router.callback_query(F.data.startswith("docs_accept:"))
async def handle_docs_accept(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])

    # –û–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: ep_documents_accepted
    await update_order_status(order_id, "ep_documents_accepted")

    # –ò–∑–º–µ–Ω–∏–º caption –∏ –∫–Ω–æ–ø–∫—É
    original_caption = callback.message.caption or ""
    updated_caption = original_caption + "\n\n‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç—ã. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∑–∞–∫–∞–∑ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ –ê–†."

    new_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–¥–∞—Ç—å –ê–†", callback_data=f"assign_ar:{order_id}")]
    ])
    await update_task_status(order_id=order_id, section="—ç–ø", new_status="–°–¥–µ–ª–∞–Ω–æ")
    await callback.message.edit_caption(caption=updated_caption, reply_markup=new_keyboard)
    await callback.answer("–î–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã ‚úÖ", show_alert=True)


@router.message(ReviewCorrectionFSM.waiting_for_customer_zip, F.document)
async def receive_customer_zip(message: Message, state: FSMContext):
    document = message.document

    if not document.file_name.lower().endswith(".zip"):
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .zip")
        return

    data = await state.get_data()
    order = await get_order_by_id(data["order_id"])

    for user_id in [order["gip_id"], (await get_specialist_by_section("—ç–ø"))["telegram_id"]]:
        await message.bot.send_document(
            chat_id=user_id,
            document=document.file_id,  # <-- –≤–∞–∂–Ω–æ: –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è document.file_id
            caption=f"üì• –ü–æ–ª—É—á–µ–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑—É: <b>{order['title']}</b>",
            parse_mode="HTML"
        )
    
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! ZIP-—Ñ–∞–π–ª –ø–µ—Ä–µ–¥–∞–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º.")
    await state.clear()

@router.callback_query(F.data.startswith("docs_error:"))
async def handle_docs_error(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.set_state(ReviewCorrectionFSM.waiting_for_customer_error_comment)
    await state.update_data(order_id=order_id)
    await callback.message.answer("‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω–µ —Ç–∞–∫ —Å –ò–†–î:")
    await callback.answer()


@router.message(ReviewCorrectionFSM.waiting_for_customer_error_comment)
async def handle_docs_error_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data["order_id"]
    order = await get_order_by_id(order_id)
    customer_id = await get_customer_telegram_id(order["customer_id"])

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìé –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ò–†–î", callback_data=f"send_ird:{order_id}")]
    ])

    await client_bot.send_message(
        chat_id=customer_id,
        text=f"‚ùó <b>–û—à–∏–±–∫–∞ –≤ –ò–†–î</b> –ø–æ –∑–∞–∫–∞–∑—É <b>{order['title']}</b>:\n\n{message.text.strip()}",
        parse_mode="HTML",
        reply_markup=keyboard
    )

    await message.answer("‚úâÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑—á–∏–∫—É.")
    await state.clear()

@router.callback_query(F.data.startswith("assign_ar:"))
async def handle_assign_ar(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    order = await get_order_by_id(order_id)
    specialist = await get_specialist_by_section("–∞—Ä")

    if not specialist:
        await callback.message.answer("‚ùóÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ê–† –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
    await state.set_state(AssignARFSM.waiting_for_deadline)
    await state.update_data(
        order_id=order_id,
        specialist_id=specialist["telegram_id"],
        description=order["description"],
        title=order["title"],
        document_url=order["document_url"]
    )

    await callback.message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5):")
    await callback.answer()
    
@router.message(AssignARFSM.waiting_for_deadline)
async def receive_ar_deadline_days(message: Message, state: FSMContext):
    from datetime import datetime, timedelta

    try:
        days = int(message.text.strip())
        if days <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞.")
        return

    deadline = datetime.today().date() + timedelta(days=days)
    await state.update_data(deadline=deadline, days=days)
    await state.set_state(AssignARFSM.waiting_for_description)
    await message.answer("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –ê–†:")


@router.message(AssignARFSM.waiting_for_description)
async def receive_ar_description(message: Message, state: FSMContext):
    from aiogram.types import FSInputFile
    import os

    description = message.text.strip()
    data = await state.get_data()

    order_id = data["order_id"]
    specialist_id = data["specialist_id"]
    title = data["title"]
    document_url = data["document_url"]
    deadline = data["deadline"]
    days = data["days"]

    await update_order_status(order_id, "assigned_ar")
    await create_task(
        order_id=order_id,
        section="–∞—Ä",
        description=description,
        deadline=deadline,
        specialist_id=specialist_id,
        status="–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ê–†"
    )

    doc_path = os.path.abspath(os.path.join("..", "psdbot", document_url))
    if not os.path.exists(doc_path):
        await message.answer("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –∑–∞–∫–∞–∑–∞.")
        await state.clear()
        return

    caption = (
        f"üìÑ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –ê–†:\n"
        f"üìå <b>{title}</b>\n"
        f"üìù {description}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ {days} –¥–Ω. ({deadline.strftime('%d.%m.%Y')})\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –ü–µ—Ä–µ–¥–∞–Ω –∑–∞–∫–∞–∑ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –ê–†"
    )

    await message.bot.send_document(
        chat_id=specialist_id,
        document=FSInputFile(doc_path),
        caption=caption,
        parse_mode="HTML"
    )

    await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ –ê–†.")
    await state.clear()


@router.callback_query(F.data.startswith("gip_ar_approve:"))
async def handle_gip_ar_approval(callback: CallbackQuery):

    order_id = int(callback.data.split(":")[1])
    await update_order_status(order_id, "approved_ar")
    
    order = await get_order_by_id(order_id)
    if not order["document_url"]:
        await callback.message.answer("‚ùóÔ∏è –£ –∑–∞–∫–∞–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å document_url.")
        return

    # –ü—É—Ç—å –¥–æ psdbot
    BASE_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "psdbot"))

    # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
    relative_path = order["document_url"]  # documents/–ñ–ö_–ê–¥–∞–ª/test (1).zip
    project_folder_rel = os.path.dirname(relative_path)  # documents/–ñ–ö_–ê–¥–∞–ª
    PROJECT_ABS_PATH = os.path.join(BASE_PATH, project_folder_rel)

    if not os.path.exists(PROJECT_ABS_PATH):
        await callback.message.answer(f"‚ùóÔ∏è –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {PROJECT_ABS_PATH}")
        return

    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç –ê–†-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ (–∏–∑ tasks)
    relative_file_path = await get_ar_task_document(order_id)
    if not relative_file_path:
        await callback.message.answer("‚ùóÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ê–†-—Ñ–∞–π–ª –≤ tasks.document_url.")
        return

    SOURCE_ABS_PATH = os.path.join(BASE_PATH, "documents", relative_file_path)
    FINAL_PATH = os.path.join(PROJECT_ABS_PATH, "ar_files.zip")

    try:
        shutil.move(SOURCE_ABS_PATH, FINAL_PATH)
    except Exception as e:
        await callback.message.answer(f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏: {e}")
        return
    await update_task_status(order_id=order_id, section="–∞—Ä", new_status="–°–¥–µ–ª–∞–Ω–æ")
    await callback.message.edit_reply_markup()
    await callback.message.answer("‚úÖ –†–∞–∑–¥–µ–ª –ê–† –ø—Ä–∏–Ω—è—Ç. –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ –∫–∞–∫ ar_files.zip.")
    await callback.answer("–§–∞–π–ª –ø—Ä–∏–Ω—è—Ç ‚úÖ", show_alert=True)

@router.callback_query(F.data.startswith("gip_ar_reject:"))
async def handle_gip_ar_rejection(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.clear()  # üßπ –û—á–∏—Å—Ç–∏–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ
    await state.set_state(ReviewArCorrectionFSM.waiting_for_comment)
    await state.update_data(order_id=order_id, section="–∞—Ä")

    await callback.message.edit_reply_markup()
    await callback.message.answer("‚ùóÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª—É –ê–†:")
    await callback.answer()

@router.message(ReviewArCorrectionFSM.waiting_for_comment)
async def send_ar_correction_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data["order_id"]
    section = data["section"]
    comment = message.text.strip()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –ø–æ —Ä–∞–∑–¥–µ–ª—É
    specialist = await get_specialist_by_order_and_section(order_id, section)
    
    if not specialist:
        await message.answer("‚ùó –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    await message.bot.send_message(
        chat_id=specialist["telegram_id"],
        text=(f"üõ† –ü–æ–ª—É—á–µ–Ω—ã –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª—É <b>{section.upper()}</b> –ø–æ –∑–∞–∫–∞–∑—É #{order_id}:\n\n"
              f"üóí {comment}"),
        parse_mode="HTML"
    )

    await message.answer("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–µ—Ä–µ–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.")
    await state.clear()

@router.callback_query(F.data.startswith("assign_kj:"))
async def handle_assign_kj(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    order = await get_order_by_id(order_id)
    specialist = await get_specialist_by_section("–∫–∂")

    if not specialist:
        await callback.message.answer("‚ùóÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ö–ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await state.set_state(AssignKJFSM.waiting_for_deadline)
    await state.update_data(
        order_id=order_id,
        specialist_id=specialist["telegram_id"],
        description=order["description"],
        title=order["title"],
        document_url=order["document_url"]
    )

    await callback.message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5):")
    await callback.answer()


@router.message(AssignKJFSM.waiting_for_deadline)
async def receive_kj_deadline_days(message: Message, state: FSMContext):
    try:
        days = int(message.text.strip())
        if days <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞.")
        return

    deadline = datetime.today().date() + timedelta(days=days)
    await state.update_data(deadline=deadline, days=days)
    await state.set_state(AssignKJFSM.waiting_for_description)
    await message.answer("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –ö–ñ:")


@router.message(AssignKJFSM.waiting_for_description)
async def receive_kj_description(message: Message, state: FSMContext):
    description = message.text.strip()
    data = await state.get_data()

    order_id = data["order_id"]
    specialist_id = data["specialist_id"]
    title = data["title"]
    document_url = data["document_url"]
    deadline = data["deadline"]
    days = data["days"]

    await update_order_status(order_id, "assigned_kj")
    await create_task(
        order_id=order_id,
        section="–∫–∂",
        description=description,
        deadline=deadline,
        specialist_id=specialist_id,
        status="–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ö–ñ"
    )

    doc_path = os.path.abspath(os.path.join("..", "psdbot", document_url))
    if not os.path.exists(doc_path):
        await message.answer("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –∑–∞–∫–∞–∑–∞.")
        await state.clear()
        return

    caption = (
        f"üìÑ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ —Ä–∞–∑–¥–µ–ª—É –ö–ñ:\n"
        f"üìå <b>{title}</b>\n"
        f"üìù {description}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ {days} –¥–Ω. ({deadline.strftime('%d.%m.%Y')})"
    )

    await message.bot.send_document(
        chat_id=specialist_id,
        document=FSInputFile(doc_path),
        caption=caption,
        parse_mode="HTML"
    )

    await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–æ –ö–ñ –ø–µ—Ä–µ–¥–∞–Ω–æ.")
    await state.clear()

@router.callback_query(F.data.startswith("approve_kj:"))
async def handle_gip_kj_approval(callback: CallbackQuery):
    import shutil
    import os

    order_id = int(callback.data.split(":")[1])
    await update_order_status(order_id, "approved_kj")

    order = await get_order_by_id(order_id)
    if not order["document_url"]:
        await callback.message.answer("‚ùóÔ∏è –£ –∑–∞–∫–∞–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å document_url.")
        return

    # –ü—É—Ç—å –¥–æ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
    BASE_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "psdbot"))
    project_folder_rel = os.path.dirname(order["document_url"])  # –Ω–∞–ø—Ä–∏–º–µ—Ä: documents/–ñ–ö_–ê–¥–∞–ª
    PROJECT_ABS_PATH = os.path.join(BASE_PATH, project_folder_rel)

    if not os.path.exists(PROJECT_ABS_PATH):
        await callback.message.answer(f"‚ùóÔ∏è –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {PROJECT_ABS_PATH}")
        return

    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ö–ñ –∏–∑ tasks.document_url
    relative_file_path = await get_kj_task_document(order_id)
    if not relative_file_path:
        await callback.message.answer("‚ùóÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –ö–ñ –≤ tasks.")
        return

    SOURCE_ABS_PATH = os.path.join(BASE_PATH, "documents", relative_file_path)
    FINAL_PATH = os.path.join(PROJECT_ABS_PATH, "kj_files.zip")

    try:
        shutil.move(SOURCE_ABS_PATH, FINAL_PATH)
    except Exception as e:
        await callback.message.answer(f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return

    await update_task_status(order_id=order_id, section="–∫–∂", new_status="–°–¥–µ–ª–∞–Ω–æ")
    await callback.message.edit_reply_markup()
    await callback.message.answer("‚úÖ –†–∞–∑–¥–µ–ª –ö–ñ –ø—Ä–∏–Ω—è—Ç. –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ –∫–∞–∫ kj_files.zip.")
    await callback.answer("–§–∞–π–ª –ø—Ä–∏–Ω—è—Ç ‚úÖ", show_alert=True)

@router.callback_query(F.data.startswith("revise_kj:"))
async def handle_kj_revision(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.set_state(ReviewKjCorrectionFSM.waiting_for_comment)
    await state.update_data(order_id=order_id, section="–∫–∂")

    await callback.message.edit_reply_markup()
    await callback.message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ –ö–ñ:")
    await callback.answer()

@router.message(ReviewKjCorrectionFSM.waiting_for_comment)
async def handle_kj_correction_comment(message: Message, state: FSMContext):
    from database import get_specialist_by_order_and_section

    data = await state.get_data()
    order_id = data["order_id"]
    section = data["section"]
    comment = message.text.strip()

    specialist = await get_specialist_by_order_and_section(order_id, section)

    if not specialist:
        await message.answer("‚ùóÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ö–ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    await message.bot.send_message(
        chat_id=specialist["telegram_id"],
        text=(
            f"‚ùóÔ∏è –ó–∞–º–µ—á–∞–Ω–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª—É <b>{section.upper()}</b> –ø–æ –∑–∞–∫–∞–∑—É #{order_id}:\n\n"
            f"üìù {comment}"
        ),
        parse_mode="HTML"
    )

    await message.answer("‚úÖ –ó–∞–º–µ—á–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ –ö–ñ.")
    await state.clear()


@router.callback_query(F.data.startswith("assign_ovik:"))
async def handle_assign_ovik(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    order = await get_order_by_id(order_id)
    specialist = await get_specialist_by_section("–æ–≤–∏–∫")

    if not specialist:
        await callback.message.answer("‚ùóÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –û–í–∏–ö –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await state.set_state(AssignOVIKFSM.waiting_for_deadline)
    await state.update_data(
        order_id=order_id,
        specialist_id=specialist["telegram_id"],
        description=order["description"],
        title=order["title"],
        document_url=order["document_url"]
    )

    await callback.message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5):")
    await callback.answer()


@router.message(AssignOVIKFSM.waiting_for_deadline)
async def receive_ovik_deadline_days(message: Message, state: FSMContext):
    try:
        days = int(message.text.strip())
        if days <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞.")
        return

    deadline = datetime.today().date() + timedelta(days=days)
    await state.update_data(deadline=deadline, days=days)
    await state.set_state(AssignOVIKFSM.waiting_for_description)
    await message.answer("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –û–í–∏–ö/–¢–°:")


@router.message(AssignOVIKFSM.waiting_for_description)
async def receive_ovik_description(message: Message, state: FSMContext):
    description = message.text.strip()
    data = await state.get_data()

    order_id = data["order_id"]
    specialist_id = data["specialist_id"]
    title = data["title"]
    document_url = data["document_url"]
    deadline = data["deadline"]
    days = data["days"]

    await update_order_status(order_id, "assigned_ovik")
    await create_task(
        order_id=order_id,
        section="–æ–≤–∏–∫",
        description=description,
        deadline=deadline,
        specialist_id=specialist_id,
        status="–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –û–í–∏–ö/–¢–°"
    )

    doc_path = os.path.abspath(os.path.join("..", "psdbot", document_url))
    if not os.path.exists(doc_path):
        await message.answer("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –∑–∞–∫–∞–∑–∞.")
        await state.clear()
        return

    caption = (
        f"üìÑ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ —Ä–∞–∑–¥–µ–ª—É –û–í–∏–ö/–¢–°:\n"
        f"üìå <b>{title}</b>\n"
        f"üìù {description}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ {days} –¥–Ω. ({deadline.strftime('%d.%m.%Y')})"
    )

    await message.bot.send_document(
        chat_id=specialist_id,
        document=FSInputFile(doc_path),
        caption=caption,
        parse_mode="HTML"
    )

    await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–æ –û–í–∏–ö –ø–µ—Ä–µ–¥–∞–Ω–æ.")
    await state.clear()


@router.callback_query(F.data.startswith("approve_ovik:"))
async def handle_gip_ovik_approval(callback: CallbackQuery):

    order_id = int(callback.data.split(":")[1])
    await update_order_status(order_id, "approved_ovik")

    order = await get_order_by_id(order_id)
    if not order["document_url"]:
        await callback.message.answer("‚ùóÔ∏è –£ –∑–∞–∫–∞–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å document_url.")
        return

    BASE_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "psdbot"))
    project_folder = os.path.dirname(order["document_url"])
    PROJECT_DIR = os.path.join(BASE_PATH, project_folder)

    relative_file_path = await get_ovik_task_document(order_id)
    if not relative_file_path:
        await callback.message.answer("‚ùóÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –û–í–∏–ö –≤ tasks.")
        return

    SOURCE_PATH = os.path.join(BASE_PATH, "documents", relative_file_path)
    TARGET_PATH = os.path.join(PROJECT_DIR, "ovik_files.zip")

    try:
        shutil.move(SOURCE_PATH, TARGET_PATH)
    except Exception as e:
        await callback.message.answer(f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return

    await update_task_status(order_id=order_id, section="–æ–≤–∏–∫", new_status="–°–¥–µ–ª–∞–Ω–æ")
    await callback.message.answer("‚úÖ –§–∞–π–ª –û–í–∏–ö –ø—Ä–∏–Ω—è—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    await callback.message.edit_reply_markup()
    await callback.answer("–ü—Ä–∏–Ω—è—Ç–æ ‚úÖ", show_alert=True)

@router.callback_query(F.data.startswith("revise_ovik:"))
async def handle_ovik_revision(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.set_state(ReviewOvikCorrectionFSM.waiting_for_comment)
    await state.update_data(order_id=order_id, section="–æ–≤–∏–∫")

    await callback.message.edit_reply_markup()
    await callback.message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ –û–í–∏–ö:")
    await callback.answer()


@router.message(ReviewOvikCorrectionFSM.waiting_for_comment)
async def handle_ovik_correction_comment(message: Message, state: FSMContext):

    data = await state.get_data()
    order_id = data["order_id"]
    section = data["section"]
    comment = message.text.strip()

    specialist = await get_specialist_by_order_and_section(order_id, section)

    if not specialist:
        await message.answer("‚ùóÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –û–í–∏–ö –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    await message.bot.send_message(
        chat_id=specialist["telegram_id"],
        text=(
            f"‚ùóÔ∏è –ó–∞–º–µ—á–∞–Ω–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª—É <b>{section.upper()}</b> –ø–æ –∑–∞–∫–∞–∑—É #{order_id}:\n\n"
            f"üìù {comment}"
        ),
        parse_mode="HTML"
    )

    await message.answer("‚úÖ –ó–∞–º–µ—á–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ –û–í–∏–ö.")
    await state.clear()


@router.callback_query(F.data.startswith("assign_gs:"))
async def handle_assign_gs(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    order = await get_order_by_id(order_id)
    specialist = await get_specialist_by_section("–≥—Å")  # –∏–ª–∏ "–≥—Å", –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π –±–∞–∑—ã

    if not specialist:
        await callback.message.answer("‚ùóÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ì–° –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await state.set_state(AssignGSFSM.waiting_for_deadline)
    await state.update_data(
        order_id=order_id,
        specialist_id=specialist["telegram_id"],
        description=order["description"],
        title=order["title"],
        document_url=order["document_url"]
    )

    await callback.message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5):")
    await callback.answer()

@router.message(AssignGSFSM.waiting_for_deadline)
async def receive_gs_deadline_days(message: Message, state: FSMContext):
    try:
        days = int(message.text.strip())
        if days <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞.")
        return

    deadline = datetime.today().date() + timedelta(days=days)
    await state.update_data(deadline=deadline, days=days)
    await state.set_state(AssignGSFSM.waiting_for_description)
    await message.answer("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –ì–°:")


@router.message(AssignGSFSM.waiting_for_description)
async def receive_gs_description(message: Message, state: FSMContext):
    description = message.text.strip()
    data = await state.get_data()

    order_id = data["order_id"]
    specialist_id = data["specialist_id"]
    title = data["title"]
    document_url = data["document_url"]
    deadline = data["deadline"]
    days = data["days"]

    await update_order_status(order_id, "assigned_gs")
    await create_task(
        order_id=order_id,
        section="–≥—Å",  # –∏–ª–∏ "–≥—Å"
        description=description,
        deadline=deadline,
        specialist_id=specialist_id,
        status="–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ì–°"
    )

    doc_path = os.path.abspath(os.path.join("..", "psdbot", document_url))
    if not os.path.exists(doc_path):
        await message.answer("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –∑–∞–∫–∞–∑–∞.")
        await state.clear()
        return

    caption = (
        f"üìÑ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ —Ä–∞–∑–¥–µ–ª—É –ìC:\n"
        f"üìå <b>{title}</b>\n"
        f"üìù {description}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ {days} –¥–Ω. ({deadline.strftime('%d.%m.%Y')})"
    )

    await message.bot.send_document(
        chat_id=specialist_id,
        document=FSInputFile(doc_path),
        caption=caption,
        parse_mode="HTML"
    )

    await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–æ –ì–° –ø–µ—Ä–µ–¥–∞–Ω–æ.")
    await state.clear()


@router.callback_query(F.data.startswith("revise_gs:"))
async def handle_gs_revision(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.set_state(ReviewGSCorrectionFSM.waiting_for_comment)
    await state.update_data(order_id=order_id, section="–≥—Å")  # –ò–ª–∏ "–≥—Å", –µ—Å–ª–∏ —É —Ç–µ–±—è —Ç–∞–∫ –≤ –±–∞–∑–µ

    await callback.message.edit_reply_markup()
    await callback.message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª—É –ì–°:")
    await callback.answer()

@router.message(ReviewGSCorrectionFSM.waiting_for_comment)
async def handle_gs_correction_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data["order_id"]
    section = data["section"]
    comment = message.text.strip()

    specialist = await get_specialist_by_order_and_section(order_id, section)

    if not specialist:
        await message.answer("‚ùóÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ì–° –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    await message.bot.send_message(
        chat_id=specialist["telegram_id"],
        text=(
            f"‚ùóÔ∏è –ó–∞–º–µ—á–∞–Ω–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª—É <b>{section.upper()}</b> –ø–æ –∑–∞–∫–∞–∑—É #{order_id}:\n\n"
            f"üìù {comment}"
        ),
        parse_mode="HTML"
    )

    await message.answer("‚úÖ –ó–∞–º–µ—á–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ –ì–°.")
    await state.clear()

@router.callback_query(F.data.startswith("approve_gs:"))
async def handle_gip_gs_approval(callback: CallbackQuery):

    order_id = int(callback.data.split(":")[1])
    await update_order_status(order_id, "approved_gs")

    order = await get_order_by_id(order_id)
    if not order["document_url"]:
        await callback.message.answer("‚ùóÔ∏è –£ –∑–∞–∫–∞–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å document_url.")
        return

    # –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
    BASE_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "psdbot"))
    project_folder = os.path.dirname(order["document_url"])
    PROJECT_DIR = os.path.join(BASE_PATH, project_folder)

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç –ì–°-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    relative_file_path = await get_eom_task_document(order_id)
    if not relative_file_path:
        await callback.message.answer("‚ùóÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –ì–° –≤ tasks.")
        return

    SOURCE_PATH = os.path.join(BASE_PATH, "documents", relative_file_path)
    TARGET_PATH = os.path.join(PROJECT_DIR, "gs_files.zip")

    try:
        shutil.move(SOURCE_PATH, TARGET_PATH)
    except Exception as e:
        await callback.message.answer(f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return

    await update_task_status(order_id=order_id, section="–≥—Å", new_status="–°–¥–µ–ª–∞–Ω–æ")

    await callback.message.answer("‚úÖ –§–∞–π–ª –ì–° –ø—Ä–∏–Ω—è—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    await callback.message.edit_reply_markup()
    await callback.answer("–ü—Ä–∏–Ω—è—Ç–æ ‚úÖ", show_alert=True)


@router.callback_query(F.data.startswith("assign_vk:"))
async def handle_assign_vk(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    order = await get_order_by_id(order_id)
    specialist = await get_specialist_by_section("–≤–∫")

    if not specialist:
        await callback.message.answer("‚ùóÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –í–ö –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await state.set_state(AssignVKFSM.waiting_for_deadline)
    await state.update_data(
        order_id=order_id,
        specialist_id=specialist["telegram_id"],
        description=order["description"],
        title=order["title"],
        document_url=order["document_url"]
    )

    await callback.message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5):")
    await callback.answer()


@router.message(AssignVKFSM.waiting_for_deadline)
async def receive_vk_deadline_days(message: Message, state: FSMContext):
    try:
        days = int(message.text.strip())
        if days <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞.")
        return

    deadline = datetime.today().date() + timedelta(days=days)
    await state.update_data(deadline=deadline, days=days)
    await state.set_state(AssignVKFSM.waiting_for_description)
    await message.answer("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –í–ö/–ù–í–ö:")


@router.message(AssignVKFSM.waiting_for_description)
async def receive_vk_description(message: Message, state: FSMContext):
    description = message.text.strip()
    data = await state.get_data()

    order_id = data["order_id"]
    specialist_id = data["specialist_id"]
    title = data["title"]
    document_url = data["document_url"]
    deadline = data["deadline"]
    days = data["days"]

    await update_order_status(order_id, "assigned_vk")
    await create_task(
        order_id=order_id,
        section="–≤–∫",
        description=description,
        deadline=deadline,
        specialist_id=specialist_id,
        status="–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –í–ö"
    )

    doc_path = os.path.abspath(os.path.join("..", "psdbot", document_url))
    if not os.path.exists(doc_path):
        await message.answer("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –∑–∞–∫–∞–∑–∞.")
        await state.clear()
        return

    caption = (
        f"üìÑ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ —Ä–∞–∑–¥–µ–ª—É –í–ö/–ù–í–ö:\n"
        f"üìå <b>{title}</b>\n"
        f"üìù {description}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ {days} –¥–Ω. ({deadline.strftime('%d.%m.%Y')})"
    )

    await message.bot.send_document(
        chat_id=specialist_id,
        document=FSInputFile(doc_path),
        caption=caption,
        parse_mode="HTML"
    )

    await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–æ –í–ö/–ù–í–ö –ø–µ—Ä–µ–¥–∞–Ω–æ.")
    await state.clear()

@router.callback_query(F.data.startswith("gip_vk_approve:"))
async def handle_gip_vk_approval(callback: CallbackQuery):

    order_id = int(callback.data.split(":")[1])
    await update_order_status(order_id, "approved_vk")

    order = await get_order_by_id(order_id)
    if not order["document_url"]:
        await callback.message.answer("‚ùóÔ∏è –£ –∑–∞–∫–∞–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å document_url.")
        return

    # –ü—É—Ç—å –¥–æ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
    BASE_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "psdbot"))
    project_folder_rel = os.path.dirname(order["document_url"])  # –Ω–∞–ø—Ä–∏–º–µ—Ä: documents/–ñ–ö_–ê–¥–∞–ª
    PROJECT_ABS_PATH = os.path.join(BASE_PATH, project_folder_rel)

    if not os.path.exists(PROJECT_ABS_PATH):
        await callback.message.answer(f"‚ùóÔ∏è –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {PROJECT_ABS_PATH}")
        return

    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –í–ö –∏–∑ tasks.document_url
    relative_file_path = await get_vk_task_document(order_id)
    if not relative_file_path:
        await callback.message.answer("‚ùóÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –í–ö –≤ tasks.")
        return

    SOURCE_ABS_PATH = os.path.join(BASE_PATH, "documents", relative_file_path)
    FINAL_PATH = os.path.join(PROJECT_ABS_PATH, "vk_files.zip")

    try:
        shutil.move(SOURCE_ABS_PATH, FINAL_PATH)
    except Exception as e:
        await callback.message.answer(f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return

    await update_task_status(order_id=order_id, section="–≤–∫", new_status="–°–¥–µ–ª–∞–Ω–æ")
    await callback.message.edit_reply_markup()
    await callback.message.answer("‚úÖ –†–∞–∑–¥–µ–ª –í–ö –ø—Ä–∏–Ω—è—Ç. –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ –∫–∞–∫ vk_files.zip.")
    await callback.answer("–§–∞–π–ª –ø—Ä–∏–Ω—è—Ç ‚úÖ", show_alert=True)

@router.callback_query(F.data.startswith("revise_vk:"))
async def handle_vk_revision(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.set_state(ReviewVkCorrectionFSM.waiting_for_comment)
    await state.update_data(order_id=order_id, section="–≤–∫")

    await callback.message.edit_reply_markup()
    await callback.message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ –í–ö:")
    await callback.answer()

@router.message(ReviewVkCorrectionFSM.waiting_for_comment)
async def handle_vk_correction_comment(message: Message, state: FSMContext):

    data = await state.get_data()
    order_id = data["order_id"]
    section = data["section"]
    comment = message.text.strip()

    specialist = await get_specialist_by_order_and_section(order_id, section)

    if not specialist:
        await message.answer("‚ùóÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –í–ö –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    await message.bot.send_message(
        chat_id=specialist["telegram_id"],
        text=(
            f"‚ùóÔ∏è –ó–∞–º–µ—á–∞–Ω–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª—É <b>{section.upper()}</b> –ø–æ –∑–∞–∫–∞–∑—É #{order_id}:\n\n"
            f"üìù {comment}"
        ),
        parse_mode="HTML"
    )

    await message.answer("‚úÖ –ó–∞–º–µ—á–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ –í–ö.")
    await state.clear()


@router.callback_query(F.data.startswith("assign_eom:"))
async def handle_assign_eom(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    order = await get_order_by_id(order_id)
    specialist = await get_specialist_by_section("—ç–æ–º")

    if not specialist:
        await callback.message.answer("‚ùóÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –≠–û–ú –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await state.set_state(AssignEOMFSM.waiting_for_deadline)
    await state.update_data(
        order_id=order_id,
        specialist_id=specialist["telegram_id"],
        description=order["description"],
        title=order["title"],
        document_url=order["document_url"]
    )

    await callback.message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5):")
    await callback.answer()


@router.message(AssignEOMFSM.waiting_for_deadline)
async def receive_eom_deadline_days(message: Message, state: FSMContext):

    try:
        days = int(message.text.strip())
        if days <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞.")
        return

    deadline = datetime.today().date() + timedelta(days=days)
    await state.update_data(deadline=deadline, days=days)
    await state.set_state(AssignEOMFSM.waiting_for_description)
    await message.answer("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –≠–û–ú:")


@router.message(AssignEOMFSM.waiting_for_description)
async def receive_eom_description(message: Message, state: FSMContext):

    description = message.text.strip()
    data = await state.get_data()

    order_id = data["order_id"]
    specialist_id = data["specialist_id"]
    title = data["title"]
    document_url = data["document_url"]
    deadline = data["deadline"]
    days = data["days"]

    await update_order_status(order_id, "assigned_eom")
    await create_task(
        order_id=order_id,
        section="—ç–æ–º",
        description=description,
        deadline=deadline,
        specialist_id=specialist_id,
        status="–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≠–û–ú"
    )

    doc_path = os.path.abspath(os.path.join("..", "psdbot", document_url))
    if not os.path.exists(doc_path):
        await message.answer("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –∑–∞–∫–∞–∑–∞.")
        await state.clear()
        return

    caption = (
        f"üìÑ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –≠–û–ú:\n"
        f"üìå <b>{title}</b>\n"
        f"üìù {description}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ {days} –¥–Ω. ({deadline.strftime('%d.%m.%Y')})\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –ü–µ—Ä–µ–¥–∞–Ω –∑–∞–∫–∞–∑ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –≠–û–ú"
    )

    await message.bot.send_document(
        chat_id=specialist_id,
        document=FSInputFile(doc_path),
        caption=caption,
        parse_mode="HTML"
    )

    await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ –≠–û–ú.")
    await state.clear()

@router.callback_query(F.data.startswith("gip_eom_approve:"))
async def handle_gip_eom_approval(callback: CallbackQuery):

    order_id = int(callback.data.split(":")[1])
    await update_order_status(order_id, "approved_eom")

    order = await get_order_by_id(order_id)
    if not order["document_url"]:
        await callback.message.answer("‚ùóÔ∏è –£ –∑–∞–∫–∞–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å document_url.")
        return

    BASE_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "psdbot"))
    project_folder_rel = os.path.dirname(order["document_url"])
    PROJECT_ABS_PATH = os.path.join(BASE_PATH, project_folder_rel)

    if not os.path.exists(PROJECT_ABS_PATH):
        await callback.message.answer(f"‚ùóÔ∏è –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {PROJECT_ABS_PATH}")
        return

    relative_file_path = await get_eom_task_document(order_id)
    if not relative_file_path:
        await callback.message.answer("‚ùóÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –≠–û–ú –≤ tasks.document_url.")
        return

    SOURCE_ABS_PATH = os.path.join(BASE_PATH, "documents", relative_file_path)
    FINAL_PATH = os.path.join(PROJECT_ABS_PATH, "eom_files.zip")

    try:
        shutil.move(SOURCE_ABS_PATH, FINAL_PATH)
    except Exception as e:
        await callback.message.answer(f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏: {e}")
        return

    await update_task_status(order_id=order_id, section="—ç–æ–º", new_status="–°–¥–µ–ª–∞–Ω–æ")
    await callback.message.edit_reply_markup()
    await callback.message.answer("‚úÖ –†–∞–∑–¥–µ–ª –≠–û–ú –ø—Ä–∏–Ω—è—Ç. –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ –∫–∞–∫ eom_files.zip.")
    await callback.answer("–§–∞–π–ª –ø—Ä–∏–Ω—è—Ç ‚úÖ", show_alert=True)


@router.callback_query(F.data.startswith("gip_eom_reject:"))
async def handle_gip_eom_rejection(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.clear()
    await state.set_state(ReviewEomCorrectionFSM.waiting_for_comment)
    await state.update_data(order_id=order_id, section="—ç–æ–º")

    await callback.message.edit_reply_markup()
    await callback.message.answer("‚ùóÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª—É –≠–û–ú:")
    await callback.answer()

@router.message(ReviewEomCorrectionFSM.waiting_for_comment)
async def send_eom_correction_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data["order_id"]
    section = data["section"]
    comment = message.text.strip()

    specialist = await get_specialist_by_order_and_section(order_id, section)

    if not specialist:
        await message.answer("‚ùó –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –≠–û–ú –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    await message.bot.send_message(
        chat_id=specialist["telegram_id"],
        text=(
            f"üõ† –ü–æ–ª—É—á–µ–Ω—ã –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª—É <b>{section.upper()}</b> –ø–æ –∑–∞–∫–∞–∑—É #{order_id}:\n\n"
            f"üóí {comment}"
        ),
        parse_mode="HTML"
    )

    await message.answer("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–µ—Ä–µ–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.")
    await state.clear()


@router.callback_query(F.data.startswith("assign_ss:"))
async def handle_assign_ss(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    order = await get_order_by_id(order_id)
    specialist = await get_specialist_by_section("—Å—Å")

    if not specialist:
        await callback.message.answer("‚ùóÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –°–° –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await state.set_state(AssignSSFSM.waiting_for_deadline)
    await state.update_data(
        order_id=order_id,
        specialist_id=specialist["telegram_id"],
        description=order["description"],
        title=order["title"],
        document_url=order["document_url"]
    )

    await callback.message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5):")
    await callback.answer()


@router.message(AssignSSFSM.waiting_for_deadline)
async def receive_ss_deadline_days(message: Message, state: FSMContext):
    from datetime import datetime, timedelta

    try:
        days = int(message.text.strip())
        if days <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞.")
        return

    deadline = datetime.today().date() + timedelta(days=days)
    await state.update_data(deadline=deadline, days=days)
    await state.set_state(AssignSSFSM.waiting_for_description)
    await message.answer("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –°–°:")


@router.message(AssignSSFSM.waiting_for_description)
async def receive_ss_description(message: Message, state: FSMContext):
    from aiogram.types import FSInputFile
    import os

    description = message.text.strip()
    data = await state.get_data()

    order_id = data["order_id"]
    specialist_id = data["specialist_id"]
    title = data["title"]
    document_url = data["document_url"]
    deadline = data["deadline"]
    days = data["days"]

    await update_order_status(order_id, "assigned_ss")
    await create_task(
        order_id=order_id,
        section="—Å—Å",
        description=description,
        deadline=deadline,
        specialist_id=specialist_id,
        status="–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –°–°"
    )

    doc_path = os.path.abspath(os.path.join("..", "psdbot", document_url))
    if not os.path.exists(doc_path):
        await message.answer("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –∑–∞–∫–∞–∑–∞.")
        await state.clear()
        return

    caption = (
        f"üìÑ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –°–°:\n"
        f"üìå <b>{title}</b>\n"
        f"üìù {description}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ {days} –¥–Ω. ({deadline.strftime('%d.%m.%Y')})\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –ü–µ—Ä–µ–¥–∞–Ω –∑–∞–∫–∞–∑ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –°–°"
    )

    await message.bot.send_document(
        chat_id=specialist_id,
        document=FSInputFile(doc_path),
        caption=caption,
        parse_mode="HTML"
    )

    await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ –°–°.")
    await state.clear()


@router.callback_query(F.data.startswith("gip_ss_approve:"))
async def handle_gip_ss_approval(callback: CallbackQuery):
    import shutil
    import os

    order_id = int(callback.data.split(":")[1])
    await update_order_status(order_id, "approved_ss")

    order = await get_order_by_id(order_id)
    if not order["document_url"]:
        await callback.message.answer("‚ùóÔ∏è –£ –∑–∞–∫–∞–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å document_url.")
        return

    BASE_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "psdbot"))
    project_folder_rel = os.path.dirname(order["document_url"])
    PROJECT_ABS_PATH = os.path.join(BASE_PATH, project_folder_rel)

    if not os.path.exists(PROJECT_ABS_PATH):
        await callback.message.answer(f"‚ùóÔ∏è –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {PROJECT_ABS_PATH}")
        return

    relative_file_path = await get_ss_task_document(order_id)
    if not relative_file_path:
        await callback.message.answer("‚ùóÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –°–° –≤ tasks.document_url.")
        return

    SOURCE_ABS_PATH = os.path.join(BASE_PATH, "documents", relative_file_path)
    FINAL_PATH = os.path.join(PROJECT_ABS_PATH, "ss_files.zip")

    try:
        shutil.move(SOURCE_ABS_PATH, FINAL_PATH)
    except Exception as e:
        await callback.message.answer(f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏: {e}")
        return

    await update_task_status(order_id=order_id, section="—Å—Å", new_status="–°–¥–µ–ª–∞–Ω–æ")
    await callback.message.edit_reply_markup()
    await callback.message.answer("‚úÖ –†–∞–∑–¥–µ–ª –°–° –ø—Ä–∏–Ω—è—Ç. –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ –∫–∞–∫ ss_files.zip.")
    await callback.answer("–§–∞–π–ª –ø—Ä–∏–Ω—è—Ç ‚úÖ", show_alert=True)


@router.callback_query(F.data.startswith("gip_ss_reject:"))
async def handle_gip_ss_rejection(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.clear()
    await state.set_state(ReviewSSCorrectionFSM.waiting_for_comment)
    await state.update_data(order_id=order_id, section="—Å—Å")

    await callback.message.edit_reply_markup()
    await callback.message.answer("‚ùóÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª—É –°–°:")
    await callback.answer()


@router.message(ReviewSSCorrectionFSM.waiting_for_comment)
async def send_ss_correction_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data["order_id"]
    section = data["section"]
    comment = message.text.strip()

    specialist = await get_specialist_by_order_and_section(order_id, section)

    if not specialist:
        await message.answer("‚ùóÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –°–° –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    await message.bot.send_message(
        chat_id=specialist["telegram_id"],
        text=(
            f"üõ† –ü–æ–ª—É—á–µ–Ω—ã –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª—É <b>{section.upper()}</b> –ø–æ –∑–∞–∫–∞–∑—É #{order_id}:\n\n"
            f"üóí {comment}"
        ),
        parse_mode="HTML"
    )

    await message.answer("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–µ—Ä–µ–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.")
    await state.clear()


@router.callback_query(F.data.startswith("send_to_expert:"))
async def handle_send_to_experts(callback: CallbackQuery, bot: Bot):

    order_id = int(callback.data.split(":")[1])
    BASE_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "psdbot"))
    expert_bot = Bot(token=EXPERT_API_TOKEN)

    # 1. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ (—Å —Ä–æ–ª—è–º–∏ –∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏)
    experts = await get_all_experts()  # –ù–∞–ø—Ä–∏–º–µ—Ä: [{'telegram_id': ..., 'section': '–∞—Ä'}, ...]

    # 2. –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
    for expert in experts:
        section = expert["section"].lower()
        tg_id = expert["telegram_id"]

        # 3. –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
        task_doc = await get_task_document_by_section(order_id, section)
        if not task_doc:
            continue  # –µ—Å–ª–∏ —É —Ä–∞–∑–¥–µ–ª–∞ –Ω–µ—Ç —Ñ–∞–π–ª–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

        abs_path = os.path.join(BASE_PATH, "documents", task_doc)
        if not os.path.exists(abs_path):
            continue  # –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏

        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —ç–∫—Å–ø–µ—Ä—Ç—É
        try:
            await expert_bot.send_document(
                chat_id=tg_id,
                document=FSInputFile(abs_path),
                caption=f"üì© –ó–∞–∫–∞–∑ #{order_id} ‚Äî —Ä–∞–∑–¥–µ–ª {section.upper()}.\n–ü—Ä–æ—Å—å–±–∞ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è."
            )

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {section} —ç–∫—Å–ø–µ—Ä—Ç—É {tg_id}: {e}")
    await update_order_status(order_id, "sent_to_experts")
    await callback.message.answer("‚úÖ –í—Å–µ —Ä–∞–∑–¥–µ–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —ç–∫—Å–ø–µ—Ä—Ç–∞–º.")
    await callback.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —ç–∫—Å–ø–µ—Ä—Ç–∞–º ‚úÖ", show_alert=True)
