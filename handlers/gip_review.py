from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import get_order_by_id, get_customer_telegram_id, get_specialist_by_section
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import FSInputFile
import os
from aiogram.types import Document

router = Router()

class ReviewCorrectionFSM(StatesGroup):
    waiting_for_comment = State()
    waiting_for_fixed_file = State()
    waiting_for_customer_question = State()
    waiting_for_customer_zip = State()

@router.callback_query(F.data.startswith("gip_approve:"))
async def handle_gip_approval(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    order = await get_order_by_id(order_id)
    customer_id = await get_customer_telegram_id(order["customer_id"])
    
    # üìé –ü—É—Ç—å –∫ –ø—Ä–∏–Ω—è—Ç–æ–º—É —Ñ–∞–π–ª—É –≠–ü (–æ–±–Ω–æ–≤–∏ –ø–æ–¥ —Å–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ö—Ä–∞–Ω–µ–Ω–∏—è)
    ep_file_path = os.path.abspath(os.path.join("..", "clientbot", order["document_url"]))

    if os.path.exists(ep_file_path):
        caption = (
            f"üì¶ –ü–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É <b>{order['title']}</b> –≤—ã–ø–æ–ª–Ω–µ–Ω —Ä–∞–∑–¥–µ–ª –≠–ü.\n"
            f"üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n"
            f"üî∑ –ì–ü–ó–£\nüî∑ –¢–£\nüî∑ –ü–î–ü"
        )
        await callback.bot.send_document(
            chat_id=customer_id,
            document=FSInputFile(ep_file_path),
            caption=caption,
            parse_mode="HTML"
        )
    else:
        await callback.message.answer("‚ùó –§–∞–π–ª –≠–ü –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üëç –í—Å—ë –ø–æ–ª—É—á–µ–Ω–æ", callback_data=f"customer_received:{order_id}"),
            InlineKeyboardButton(text="üì£ –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã", callback_data=f"customer_has_questions:{order_id}")
        ]
    ])
    await callback.bot.send_message(
        chat_id=customer_id,
        text="‚ùì –£—Ç–æ—á–Ω–∏—Ç–µ —Å—Ç–∞—Ç—É—Å: –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –∏ –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ?",
        reply_markup=keyboard
    )

    # –û—á–∏—Å—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    await callback.message.edit_reply_markup()
    await callback.message.answer("‚úÖ –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –∑–∞–∫–∞–∑—á–∏–∫—É.")
    await callback.answer("–ü–µ—Ä–µ–¥–∞–Ω–æ –∑–∞–∫–∞–∑—á–∏–∫—É ‚úÖ", show_alert=True)

@router.callback_query(F.data.startswith("gip_reject:"))
async def handle_gip_rejection(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.set_state(ReviewCorrectionFSM.waiting_for_comment)
    await state.update_data(order_id=order_id)
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("‚ùó –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏ –ø–æ –≠–ü:")

@router.message(ReviewCorrectionFSM.waiting_for_comment)
async def send_correction_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data["order_id"]
    comment = message.text.strip()
    order = await get_order_by_id(order_id)

    specialist = await get_specialist_by_section("—ç–ø")
    if not specialist:
        await message.answer("‚ùó –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª", callback_data=f"resubmit_ep:{order['id']}")]
    ])
    await message.bot.send_message(
        chat_id=specialist["telegram_id"],
        text=(
            f"‚ùó <b>–ó–∞–º–µ—á–∞–Ω–∏—è –ø–æ –≠–ü</b> –ø–æ –∑–∞–∫–∞–∑—É: <b>{order['title']}</b>\n\n"
            f"{comment}"
        ),
        parse_mode="HTML",
        reply_markup=keyboard
    )

    await message.answer("‚úâÔ∏è –ó–∞–º–µ—á–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.")
    await state.clear()


@router.callback_query(F.data.startswith("customer_received:"))
async def handle_customer_received(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    order = await get_order_by_id(order_id)
    specialist = await get_specialist_by_section("—ç–ø")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º
    await callback.bot.send_message(
        chat_id=specialist["telegram_id"],
        text=f"‚úÖ –ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –≠–ü –ø–æ –∑–∞–∫–∞–∑—É: <b>{order['title']}</b>",
        parse_mode="HTML"
    )
    await callback.bot.send_message(
        chat_id=order["gip_id"],
        text=f"‚úÖ –ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –≠–ü –ø–æ –∑–∞–∫–∞–∑—É: <b>{order['title']}</b>",
        parse_mode="HTML"
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(ReviewCorrectionFSM.waiting_for_customer_zip)
    await state.update_data(order_id=order_id)

    await callback.message.edit_reply_markup()
    await callback.message.answer("üì¶ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ZIP-–∞—Ä—Ö–∏–≤ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ (–ì–ü–ó–£, –¢–£, –ü–î–ü).")
    await callback.answer("–û–∂–∏–¥–∞—é ZIP-—Ñ–∞–π–ª üìÇ", show_alert=True)

@router.callback_query(F.data.startswith("customer_has_questions:"))
async def handle_customer_has_questions(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.set_state(ReviewCorrectionFSM.waiting_for_customer_question)
    await state.update_data(order_id=order_id)
    
    await callback.message.edit_reply_markup()
    await callback.message.answer("üì© –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–∫–∞–∑—É:")
    await callback.answer()

@router.message(ReviewCorrectionFSM.waiting_for_customer_question)
async def receive_customer_question(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data.get("order_id")
    question = message.text.strip()

    order = await get_order_by_id(order_id)
    specialist = await get_specialist_by_section("—ç–ø")
    
    if not specialist:
        await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –ø–æ –≠–ü.")
        await state.clear()
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìÑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª", callback_data=f"spec_attach_file:{order_id}"),
            InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º", callback_data=f"spec_reply_comment:{order_id}")
        ]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await message.bot.send_message(
        chat_id=specialist["telegram_id"],
        text=(
            f"üì£ <b>–í–æ–ø—Ä–æ—Å –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞</b> –ø–æ –∑–∞–∫–∞–∑—É: <b>{order['title']}</b>\n\n"
            f"{question}"
        ),
        parse_mode="HTML",
        reply_markup=keyboard
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ì–ò–ü—É
    await message.bot.send_message(
        chat_id=order["gip_id"],
        text=(
            f"üì£ <b>–í–æ–ø—Ä–æ—Å –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞</b> –ø–æ –∑–∞–∫–∞–∑—É: <b>{order['title']}</b>\n\n"
            f"{question}"
        ),
        parse_mode="HTML"
    )

    await message.answer("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –∏ –ì–ò–ü—É.")
    await state.clear()

@router.callback_query(F.data.startswith("resubmit_ep:"))
async def handle_resubmit_ep(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.set_state(ReviewCorrectionFSM.waiting_for_fixed_file)
    await state.update_data(order_id=order_id)
    await callback.message.answer("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π PDF —Ñ–∞–π–ª –≠–ü:")
    await callback.answer()

@router.message(ReviewCorrectionFSM.waiting_for_fixed_file, F.document)
async def receive_fixed_ep(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data["order_id"]
    order = await get_order_by_id(order_id)

    document: Document = message.document
    if not document.file_name.lower().endswith(".pdf"):
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.")
        return

    # –û—Ç–ø—Ä–∞–≤–∏–º –ì–ò–ü—É
    await message.bot.send_document(
        chat_id=order["gip_id"],
        document=document,
        caption=f"üì© –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≠–ü –ø–æ –∑–∞–∫–∞–∑—É: <b>{order['title']}</b>",
        parse_mode="HTML"
    )

    await message.answer("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ì–ò–ü—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
    await state.clear()


@router.message(ReviewCorrectionFSM.waiting_for_customer_zip, F.document)
async def receive_customer_zip(message: Message, state: FSMContext):
    document = message.document

    # –ü—Ä–æ–≤–µ—Ä–∏–º, ZIP –ª–∏ —ç—Ç–æ
    if not document.file_name.lower().endswith(".zip"):
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .zip")
        return

    data = await state.get_data()
    order = await get_order_by_id(data["order_id"])

    # –£–≤–µ–¥–æ–º–∏–º –ì–ò–ü–∞ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    for user_id in [order["gip_id"], (await get_specialist_by_section("—ç–ø"))["telegram_id"]]:
        await message.bot.send_document(
            chat_id=user_id,
            document=document,
            caption=f"üì• –ü–æ–ª—É—á–µ–Ω ZIP-—Ñ–∞–π–ª –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑—É: <b>{order['title']}</b>",
            parse_mode="HTML"
        )

    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! ZIP-—Ñ–∞–π–ª –ø–µ—Ä–µ–¥–∞–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º.")
    await state.clear()
