from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from states.edit_user_states import EditCustomerFSM
from database import get_all_customers, update_customer_field, archive_customer_by_id, restore_customer, get_archived_customers_sorted_by_id

USERS_PER_PAGE = 5
router = Router()

# ====== –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ ======
@router.callback_query(F.data == "edit_type:customers")
async def show_customers_start(callback: CallbackQuery):
    await show_customers_page(callback.message, page=0, edit=True)
    await callback.answer()


@router.callback_query(F.data.startswith("customers_page:"))
async def paginate_customers(callback: CallbackQuery):
    page = int(callback.data.split(":")[1])
    await show_customers_page(callback.message, page, edit=True)
    await callback.answer()


@router.callback_query(F.data.startswith("archive_customers_page:"))
async def paginate_archived_customers(callback: CallbackQuery):
    page = int(callback.data.split(":")[1])
    await show_customers_page(callback.message, page, edit=True, is_archive=True)
    await callback.answer()


async def show_customers_page(message: Message, page: int, edit=False, is_archive=False):
    customers = await (get_archived_customers_sorted_by_id() if is_archive else get_all_customers())
    total_pages = (len(customers) - 1) // USERS_PER_PAGE + 1

    start_idx = page * USERS_PER_PAGE
    end_idx = start_idx + USERS_PER_PAGE
    page_customers = customers[start_idx:end_idx]

    if not page_customers:
        text = "‚ùå –ó–∞–∫–∞–∑—á–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        if edit:
            await message.edit_text(text)
        else:
            await message.answer(text)
        return

    kb_buttons = [[
        InlineKeyboardButton(
            text=f"üÜî {c['id']} {c['full_name']}",
            callback_data=f"{'restore_customer' if is_archive else 'edit_customer'}:{c['id']}"
        )
    ] for c in page_customers]

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"{'archive_customers_page' if is_archive else 'customers_page'}:{page - 1}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"{'archive_customers_page' if is_archive else 'customers_page'}:{page + 1}"))

    if nav_buttons:
        kb_buttons.append(nav_buttons)

    if not is_archive:
        kb_buttons.append([
            InlineKeyboardButton(text="üìÅ –ê—Ä—Ö–∏–≤ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤", callback_data="archive_customers_page:0")
        ])

    kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
    title = "üìÅ –ê—Ä—Ö–∏–≤ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤" if is_archive else "üì¶ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤"
    text = f"{title} <b>{page + 1}</b> –∏–∑ <b>{total_pages}</b>"

    if edit:
        await message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    else:
        await message.answer(text, reply_markup=kb, parse_mode="HTML")


# ====== –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑—á–∏–∫–∞ ======
@router.callback_query(F.data.startswith("edit_customer:"))
async def edit_customer_profile(callback: CallbackQuery, state: FSMContext):
    customer_id = int(callback.data.split(":")[1])
    await state.update_data(edit_customer_id=customer_id)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", callback_data="edit_customer_field:full_name")],
        [InlineKeyboardButton(text="üÜî –ò–∑–º–µ–Ω–∏—Ç—å –ò–ò–ù/–ë–ò–ù", callback_data="edit_customer_field:iin_or_bin")],
        [InlineKeyboardButton(text="üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_customer_field:phone")],
        [InlineKeyboardButton(text="‚úâÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å Email", callback_data="edit_customer_field:email")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–∞", callback_data="delete_customer")]
    ])
    await callback.message.edit_text(
        f"üîß –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —É –∑–∞–∫–∞–∑—á–∏–∫–∞ ID <b>{customer_id}</b>?",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await callback.answer()


# ====== FSM –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è ======
@router.callback_query(F.data.startswith("edit_customer_field:"))
async def ask_new_customer_value(callback: CallbackQuery, state: FSMContext):
    field = callback.data.split(":")[1]
    await state.update_data(edit_customer_field=field)
    await state.set_state(EditCustomerFSM.waiting_for_new_value)
    await callback.message.edit_text(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è <b>{field}</b>:",
        parse_mode="HTML"
    )
    await callback.answer()


@router.message(EditCustomerFSM.waiting_for_new_value)
async def save_customer_new_value(message: Message, state: FSMContext):
    data = await state.get_data()
    customer_id = data["edit_customer_id"]
    field = data["edit_customer_field"]
    new_value = message.text.strip()

    await update_customer_field(customer_id, field, new_value)
    await message.answer(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ ID <b>{customer_id}</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", parse_mode="HTML")
    await state.clear()


# ====== –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ ======
@router.callback_query(F.data == "delete_customer")
async def archive_customer(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    customer_id = data["edit_customer_id"]

    await archive_customer_by_id(customer_id)
    await callback.message.edit_text(
        f"üì¶ –ó–∞–∫–∞–∑—á–∏–∫ ID <b>{customer_id}</b> –±—ã–ª –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ –∞—Ä—Ö–∏–≤.",
        parse_mode="HTML"
    )
    await state.clear()
    await callback.answer("–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ ‚úÖ")


# ====== –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ ======
@router.callback_query(F.data.startswith("restore_customer:"))
async def restore_customer_callback(callback: CallbackQuery):
    customer_id = int(callback.data.split(":")[1])
    await restore_customer(customer_id)
    await callback.message.edit_text("‚úÖ –ó–∞–∫–∞–∑—á–∏–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    await callback.answer("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚úÖ")
