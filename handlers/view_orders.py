from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from database import get_all_orders, get_customer_telegram_id, create_task, get_order_by_id, get_specialist_by_section
import os
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram import Bot
from database import delete_order, update_order_status
from states.states import EditOrder
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from database import set_order_gip
from aiogram.fsm.context import FSMContext
from datetime import timedelta, date
from states.task_states import AssignCalculatorFSM
from states.cl_correction import ReviewCalcCorrectionFSM
load_dotenv()
router = Router()
BASE_DOC_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "clientbot", "documents"))
# Initialize the client bot with the token from environment variables
client_bot = Bot(
    token=os.getenv("CLIENT_BOT_TOKEN"),
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

async def send_orders_to(recipient, send_method):
    orders = await get_all_orders()

    if not orders:
        await send_method("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return
    
    bot = recipient.bot

    for order in orders:
        text = (
            f"üìå <b>{order['title']}</b>\n"
            f"üìù {order['description']}\n"
            f"üë§ –ó–∞–∫–∞–∑—á–∏–∫ ID: {order['customer_id']}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {order['created_at'].strftime('%Y-%m-%d %H:%M')}"
        )

        if order["status"] == "queue":
                keyboard_buttons = [[
                    InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"order_accept:{order['id']}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"order_reject:{order['id']}"),
                    InlineKeyboardButton(text="‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"order_edit:{order['id']}")
                ]]
        elif order["status"] == "approved":
                keyboard_buttons = [[
                    InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–¥–∞—Ç—å –≠–ü", callback_data=f"assign_sketch:{order['id']}")
                ]]
        elif order["status"] == "approved_ar":
            keyboard_buttons = [[
                InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–¥–∞—Ç—å —Ä–∞—Å—á—ë—Ç—á–∏–∫—É", callback_data=f"assign_calculator:{order['id']}"),
                InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–¥–∞—Ç—å –≥–µ–Ω–ø–ª–∞–Ω–∏—Å—Ç—É", callback_data=f"assign_genplan:{order['id']}")
            ]]
        elif order["status"] == "waiting_cl":
            keyboard_buttons = [[
                InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–¥–∞—Ç—å –û–í–∏–ö/–¢–°", callback_data=f"assign_ovik:{order['id']}"),
                InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–¥–∞—Ç—å –í–ö/–ù–í–ö", callback_data=f"assign_vk:{order['id']}"),
                InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–¥–∞—Ç—å –í–ì–°/–ù–ì–°", callback_data=f"assign_vgs:{order['id']}")
            ]]
            
        else:
                keyboard_buttons = []

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        document_path = os.path.abspath(os.path.join(BASE_DOC_PATH, os.path.relpath(order["document_url"], "documents")))

        if os.path.exists(document_path):
            doc = FSInputFile(document_path)
            await bot.send_document(chat_id=recipient.chat.id, document=doc, caption=text, reply_markup=keyboard)
        else:
            await send_method(f"{text}\n\n‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {document_path}", reply_markup=keyboard)

@router.callback_query(F.data.startswith("order_accept:"))
async def accept_order(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    await update_order_status(order_id, "approved")
    gip_id = callback.from_user.id  # –ø–æ–ª—É—á–∞–µ–º telegram ID –ì–ò–ü–∞
    await set_order_gip(order_id, gip_id)
    original_caption = callback.message.caption or ""
    updated_caption = original_caption + "\n\n‚úÖ –ó–∞–∫–∞–∑ –±—ã–ª –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ —ç—Å–∫–∏–∑—á–∏–∫—É."
    new_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–¥–∞—Ç—å –≠–ü", callback_data=f"assign_sketch:{order_id}")]
        ])
    await callback.message.edit_caption(caption=updated_caption, reply_markup=new_keyboard)
    await callback.answer("–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç ‚úÖ", show_alert=True)
    await callback.message.answer("‚úÖ –ó–∞–∫–∞–∑ –±—ã–ª –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ —ç—Å–∫–∏–∑—á–∏–∫—É.")




@router.callback_query(F.data.startswith("order_reject:"))
async def reject_order(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])

    orders = await get_all_orders()
    order = next((o for o in orders if o["id"] == order_id), None)

    if order:
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
        document_path = os.path.abspath(os.path.join(BASE_DOC_PATH, os.path.relpath(order["document_url"], "documents")))
        if os.path.exists(document_path):
            try:
                os.remove(document_path)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
        customer_telegram_id = await get_customer_telegram_id(order["customer_id"])
        if customer_telegram_id:
            await callback.bot.send_message(
                chat_id=customer_telegram_id,
                text=(
                    f"üö´ –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω.\n\n"
                    f"üìå <b>{order['title']}</b>\n"
                    f"üìù {order['description']}\n"
                    f"üìÖ –°–æ–∑–¥–∞–Ω: {order['created_at'].strftime('%Y-%m-%d %H:%M')}"
                )
            )

        await delete_order(order_id)

    await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω –∏ —É–¥–∞–ª—ë–Ω ‚ùå", show_alert=True)
    await callback.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω –∏ —É–¥–∞–ª—ë–Ω.")
    
@router.callback_query(F.data.startswith("order_edit:"))
async def edit_order(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.set_state(EditOrder.waiting_for_comment)
    await state.update_data(order_id=order_id)
    await callback.answer()
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑—á–∏–∫—É –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:")


@router.message(EditOrder.waiting_for_comment)
async def process_edit_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data.get("order_id")
    comment = message.text

    orders = await get_all_orders()
    order = next((o for o in orders if o["id"] == order_id), None)

    if not order:
        await message.answer("‚ùó –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    customer_telegram_id = await get_customer_telegram_id(order["customer_id"])
    if customer_telegram_id:
        fix_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤", callback_data=f"start_fix:{order['id']}")]
        ])
        await client_bot.send_message(
            chat_id=customer_telegram_id,
            text=(
                f"‚úèÔ∏è –í–∞—à –∑–∞–∫–∞–∑ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π.\n"
                f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ì–ò–ü–∞:</b> {comment}\n\n"
                f"üìå <b>{order['title']}</b>\n"
                f"üìù {order['description']}\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω: {order['created_at'].strftime('%Y-%m-%d %H:%M')}\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤."
            ),
            reply_markup=fix_kb
        )

    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑—á–∏–∫—É ‚úâÔ∏è")
    await state.clear()

@router.message(F.text == "üì¶ –ó–∞–∫–∞–∑—ã")
async def show_orders_message(message: Message):
    await send_orders_to(message, message.answer)

@router.callback_query(F.data == "view_orders")
async def show_orders_callback(callback: CallbackQuery):
    await send_orders_to(callback.message, callback.message.answer)

# üí¨ –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
async def send_project_files(order_title: str, recipient_telegram_id: int, bot, role: str):
    folder_path = os.path.join(BASE_DOC_PATH, order_title)

    if not os.path.exists(folder_path):
        await bot.send_message(recipient_telegram_id, f"‚ùóÔ∏è –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ {order_title} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    files = os.listdir(folder_path)
    if not files:
        await bot.send_message(recipient_telegram_id, f"üìÅ –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ {order_title} –ø—É—Å—Ç–∞.")
        return

    await bot.send_message(recipient_telegram_id, f"üì¶ –ü–µ—Ä–µ–¥–∞–Ω—ã —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ <b>{order_title}</b> –¥–ª—è —Ä–æ–ª–∏: {role}", parse_mode="HTML")

    for filename in files:
        file_path = os.path.join(folder_path, filename)
        if os.path.isfile(file_path):
            await bot.send_document(recipient_telegram_id, FSInputFile(file_path))


# ‚úÖ –ü–µ—Ä–µ–¥–∞—Ç—å —Ä–∞—Å—á–µ—Ç—á–∏–∫—É
@router.callback_query(F.data.startswith("assign_calculator:"))
async def assign_to_calculator(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.update_data(order_id=order_id)
    await state.set_state(AssignCalculatorFSM.waiting_for_description)

    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç—á–∏–∫–∞:")
    await callback.answer()

@router.message(AssignCalculatorFSM.waiting_for_description)
async def receive_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    await state.set_state(AssignCalculatorFSM.waiting_for_deadline)
    await message.answer("üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ –¥–Ω—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3):")

@router.message(AssignCalculatorFSM.waiting_for_deadline)
async def receive_deadline(message: Message, state: FSMContext):
    try:
        days = int(message.text.strip())
        if days <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5)")
        return

    data = await state.get_data()
    order_id = data["order_id"]
    description = data["description"]
    deadline = date.today() + timedelta(days=days)

    order = await get_order_by_id(order_id)
    calculator = await get_specialist_by_section("—Ä—Å")
    if not calculator:
        await message.answer("‚ùó –†–∞—Å—á–µ—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    await create_task(
        order_id=order_id,
        section="—Ä—Å",
        specialist_id=calculator["telegram_id"],
        description=description,
        deadline=deadline,
        status="–Ω–∞–∑–Ω–∞—á–µ–Ω–æ"
    )

    await send_project_files(order["title"], calculator["telegram_id"], message.bot, "—Ä—Å")

    await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –ø–µ—Ä–µ–¥–∞–Ω–æ —Ä–∞—Å—á–µ—Ç—á–∏–∫—É.")
    await state.clear()

# ‚úÖ –ü–µ—Ä–µ–¥–∞—Ç—å –≥–µ–Ω–ø–ª–∞–Ω–∏—Å—Ç—É
@router.callback_query(F.data.startswith("assign_genplan:"))
async def assign_to_genplanner(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    from database import get_order_by_id, get_specialist_by_section

    order = await get_order_by_id(order_id)
    order_title = order["title"]

    genplan = await get_specialist_by_section("–≥–µ–Ω–ø–ª–∞–Ω")
    if not genplan:
        await callback.message.answer("‚ùóÔ∏è –ì–µ–Ω–ø–ª–∞–Ω–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    await send_project_files(order_title, genplan["telegram_id"], callback.bot, "–≥–µ–Ω–ø–ª–∞–Ω–∏—Å—Ç")
    await callback.answer("üì§ –ü–µ—Ä–µ–¥–∞–Ω–æ –≥–µ–Ω–ø–ª–∞–Ω–∏—Å—Ç—É", show_alert=True)

@router.callback_query(F.data.startswith("approve_calc:"))
async def handle_calc_approval(callback: CallbackQuery):
    from database import get_specialist_by_order_and_section
    order_id = int(callback.data.split(":")[1])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    await update_order_status(order_id, "waiting_cl")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –ø–æ —Ä–∞—Å—á—ë—Ç—É
    specialist = await get_specialist_by_order_and_section(order_id, "—Ä—Å")
    if specialist:
        await callback.bot.send_message(
            chat_id=specialist["telegram_id"],
            text=f"‚úÖ –í–∞—à —Ä–∞—Å—á—ë—Ç –ø–æ –∑–∞–∫–∞–∑—É #{order_id} –ø—Ä–∏–Ω—è—Ç –ì–ò–ü–æ–º."
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É –ì–ò–ü–∞
    await callback.message.edit_reply_markup()
    await callback.message.answer("‚úÖ –†–∞—Å—á—ë—Ç –ø—Ä–∏–Ω—è—Ç.")
    await callback.answer("–ü—Ä–∏–Ω—è—Ç–æ ‚úÖ", show_alert=True)

@router.callback_query(F.data.startswith("revise_calc:"))
async def handle_calc_revision(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.set_state(ReviewCalcCorrectionFSM.waiting_for_comment)
    await state.update_data(order_id=order_id, section="—Ä—Å")

    await callback.message.edit_reply_markup()
    await callback.message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ —Ä–∞—Å—á—ë—Ç—É:")
    await callback.answer()

@router.message(ReviewCalcCorrectionFSM.waiting_for_comment)
async def handle_calc_correction_comment(message: Message, state: FSMContext):
    from database import get_specialist_by_order_and_section

    data = await state.get_data()
    order_id = data["order_id"]
    section = data["section"]  # –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å '—Ä—Å'
    comment = message.text.strip()

    specialist = await get_specialist_by_order_and_section(order_id, section)

    if not specialist:
        await message.answer("‚ùóÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ä–∞—Å—á—ë—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    await message.bot.send_message(
        chat_id=specialist["telegram_id"],
        text=(
            f"‚ùóÔ∏è –ó–∞–º–µ—á–∞–Ω–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª—É <b>{section.upper()}</b> –ø–æ –∑–∞–∫–∞–∑—É #{order_id}:\n\n"
            f"üìù {comment}"
        ),
        parse_mode="HTML"
    )

    await message.answer("‚úÖ –ó–∞–º–µ—á–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–∞—Å—á—ë—Ç—á–∏–∫—É.")
    await state.clear()