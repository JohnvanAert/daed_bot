from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from database import get_all_orders, get_customer_telegram_id
import os
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram import Bot
from database import delete_order 

router = Router()
BASE_DOC_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "clientbot", "documents"))

async def send_orders_to(recipient, send_method):
    orders = await get_all_orders()

    if not orders:
        await send_method("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return
    
    bot = recipient.bot

    for order in orders:
        text = (
            f"üìå <b>{order['title']}</b>\n"
            f"üìù {order['description']}\n"
            f"üë§ –ó–∞–∫–∞–∑—á–∏–∫ ID: {order['customer_id']}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {order['created_at'].strftime('%Y-%m-%d %H:%M')}"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"order_accept:{order['id']}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"order_reject:{order['id']}"),
                InlineKeyboardButton(text="‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"order_edit:{order['id']}")
            ]
        ])
        document_path = os.path.abspath(os.path.join(BASE_DOC_PATH, os.path.relpath(order["document_url"], "documents")))

        if os.path.exists(document_path):
            doc = FSInputFile(document_path)
            await bot.send_document(chat_id=recipient.chat.id, document=doc, caption=text, reply_markup=keyboard)
        else:
            await send_method(f"{text}\n\n‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {document_path}", reply_markup=keyboard)

@router.callback_query(F.data.startswith("order_accept:"))
async def accept_order(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    await callback.answer("–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç ‚úÖ", show_alert=True)
    await callback.message.edit_reply_markup()  # –£–¥–∞–ª–∏–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è


@router.callback_query(F.data.startswith("order_reject:"))
async def reject_order(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])

    orders = await get_all_orders()
    order = next((o for o in orders if o["id"] == order_id), None)

    if order:
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
        document_path = os.path.abspath(os.path.join(BASE_DOC_PATH, os.path.relpath(order["document_url"], "documents")))
        if os.path.exists(document_path):
            try:
                os.remove(document_path)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
        customer_telegram_id = await get_customer_telegram_id(order["customer_id"])
        if customer_telegram_id:
            await callback.bot.send_message(
                chat_id=customer_telegram_id,
                text=(
                    f"üö´ –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω.\n\n"
                    f"üìå <b>{order['title']}</b>\n"
                    f"üìù {order['description']}\n"
                    f"üìÖ –°–æ–∑–¥–∞–Ω: {order['created_at'].strftime('%Y-%m-%d %H:%M')}"
                )
            )

        await delete_order(order_id)

    await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω –∏ —É–¥–∞–ª—ë–Ω ‚ùå", show_alert=True)
    await callback.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω –∏ —É–¥–∞–ª—ë–Ω.")
    
@router.callback_query(F.data.startswith("order_edit:"))
async def edit_order(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    await callback.answer("–û—Ç–∫—Ä—ã—Ç —Ä–µ–∂–∏–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚úèÔ∏è", show_alert=True)
    await callback.message.edit_reply_markup()

@router.message(F.text == "üì¶ –ó–∞–∫–∞–∑—ã")
async def show_orders_message(message: Message):
    await send_orders_to(message, message.answer)

@router.callback_query(F.data == "view_orders")
async def show_orders_callback(callback: CallbackQuery):
    await send_orders_to(callback.message, callback.message.answer)
