from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery, FSInputFile
from database import get_all_orders, get_customer_telegram_id, create_task, get_order_by_id, get_specialist_by_section, get_specialist_by_order_and_section, update_task_status, get_genplan_task_document, get_calc_task_document, update_task_document_path, is_section_task_done, are_all_sections_done, update_order_document_url, update_task_document_url, get_completed_orders, get_sections_by_order_id, get_estimate_task_document
import os
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram import Bot
from database import delete_order, update_order_status
from states.states import EditOrder
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from database import set_order_gip
from aiogram.fsm.context import FSMContext
from datetime import timedelta, date
from states.task_states import AssignCalculatorFSM
from states.cl_correction import ReviewCalcCorrectionFSM
from states.task_states import AssignGenplanFSM
from datetime import datetime, timedelta
from states.task_states import ReviewGenplanCorrectionFSM
from states.task_states import AssignARFSM
from states.states import AssignSmetchikFSM, AttachFilesFSM
import zipfile
import shutil
import re
load_dotenv()
router = Router()
ALLOWED_STATUSES = {
    "assigned_vk", "approved_gs", "assigned_gs", "approved_ovik", "approve_ovik",
    "assigned_ovik", "approved_kj", "approve_kj", "assigned_kj", "approved_ss",
    "gip_ss_approve", "assigned_ss", "approved_eom", "gip_eom_approve", "assigned_eom",
    "approved_vk", "gip_vk_approve", "waiting_cl"
}
BASE_DOC_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "psdbot", "documents"))
# Initialize the client bot with the token from environment variables

section_files_map = {
    "–∞—Ä": ["ar_files.zip", "genplan_files.zip"],
    "–∫–∂": ["kj_files.zip", "calc_files.zip"],
    "–æ–≤–∏–∫": ["ovik_files.zip"],
    "–≤–∫": ["vk_files.zip"],
    "—ç–æ": ["eom_files.zip"],
    "—Å—Å": ["ss_files"]
}

async def send_orders_to(recipient, send_method):
    orders = await get_all_orders()

    if not orders:
        await send_method("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return
    
    bot = recipient.bot

    for order in orders:
        text = (
            f"üìå <b>{order['title']}</b>\n"
            f"üìù {order['description']}\n"
            f"üë§ –ó–∞–∫–∞–∑—á–∏–∫ ID: {order['customer_id']}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {order['created_at'].strftime('%Y-%m-%d %H:%M')}"
        )

        if order["status"] == "queue":
                keyboard_buttons = [[
                    InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"order_accept:{order['id']}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"order_reject:{order['id']}"),
                    InlineKeyboardButton(text="‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"order_edit:{order['id']}")
                ]]
        elif order["status"] == "approved":
                keyboard_buttons = [[
                    InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–¥–∞—Ç—å –≠–ü", callback_data=f"assign_sketch:{order['id']}")
                ]]
        elif order["status"] == "approved_ar":
            keyboard_buttons = [[
                InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–¥–∞—Ç—å —Ä–∞—Å—á—ë—Ç—á–∏–∫—É", callback_data=f"assign_calculator:{order['id']}"),
                InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–¥–∞—Ç—å –≥–µ–Ω–ø–ª–∞–Ω–∏—Å—Ç—É", callback_data=f"assign_genplan:{order['id']}")
            ]]
        elif order["status"] == "approved_estimates":
            keyboard_buttons = [[
                InlineKeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ü–î", callback_data=f"finish_pd:{order['id']}")
            ]]
        elif order["status"] in ALLOWED_STATUSES:
            keyboard_buttons = []

            if not await is_section_task_done(order["id"], "–æ–≤–∏–∫"):
                keyboard_buttons.append([
                    InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–¥–∞—Ç—å –û–í–∏–ö/–¢–°", callback_data=f"assign_ovik:{order['id']}")
                ])
            if not await is_section_task_done(order["id"], "–≤–∫"):
                keyboard_buttons.append([
                    InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–¥–∞—Ç—å –í–ö/–ù–í–ö", callback_data=f"assign_vk:{order['id']}")
                ])
            if not await is_section_task_done(order["id"], "–≥—Å"):
                keyboard_buttons.append([
                    InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–¥–∞—Ç—å –í–ì–°/–ù–ì–°", callback_data=f"assign_gs:{order['id']}")
                ])
            if not await is_section_task_done(order["id"], "–∫–∂"):
                keyboard_buttons.append([
                    InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–¥–∞—Ç—å –ö–ñ", callback_data=f"assign_kj:{order['id']}")
                ])
            if not await is_section_task_done(order["id"], "—ç–æ–º"):
                keyboard_buttons.append([
                    InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–¥–∞—Ç—å –≠–û–ú", callback_data=f"assign_eom:{order['id']}")
                ])
            if not await is_section_task_done(order["id"], "—Å—Å"):
                keyboard_buttons.append([
                    InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–¥–∞—Ç—å –°–°", callback_data=f"assign_ss:{order['id']}")
                ])
             # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ü–ó –∏ –ü–û–°
            keyboard_buttons.append([
                InlineKeyboardButton(text="üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –ø–æ—è—Å–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å–∫—É", callback_data=f"attach_pz:{order['id']}")
            ])
            keyboard_buttons.append([
                InlineKeyboardButton(text="üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –ü–û–°", callback_data=f"attach_pos:{order['id']}")
            ])
            keyboard_buttons.append([
                InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–¥–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–∞–º", callback_data=f"send_to_expert:{order['id']}"),
                
            ])
            keyboard_buttons.append([
                    InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–¥–∞—Ç—å –°–º–µ—Ç—á–∏–∫—É", callback_data=f"assign_sm:{order['id']}")
                ])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–º–µ—Ç—á–∏–∫—É, –µ—Å–ª–∏ –í–°–ï –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
            # if await are_all_sections_done(order["id"]):
            #     keyboard_buttons.append([
            #         InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–¥–∞—Ç—å –°–º–µ—Ç—á–∏–∫—É", callback_data=f"assign_sm:{order['id']}")
            #     ])

            
        else:
                keyboard_buttons = []

        keyboard_buttons.append([
            InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç", callback_data=f"send_project_zip:{order['id']}")
        ])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        document_path = os.path.abspath(os.path.join(BASE_DOC_PATH, os.path.relpath(order["document_url"], "documents")))
        if os.path.exists(document_path):
            await send_method(text, reply_markup=keyboard)
        else:
            await send_method(f"{text}\n\n‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {document_path}", reply_markup=keyboard)

@router.callback_query(F.data.startswith("send_project_zip:"))
async def handle_send_project_zip(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    order = await get_order_by_id(order_id)
    order_title = order["title"]
    
    await callback.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É–µ–º –∞—Ä—Ö–∏–≤... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

    # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ ‚Äî —Å –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏ –≤–º–µ—Å—Ç–æ –ø—Ä–æ–±–µ–ª–æ–≤
    folder_name = order_title.replace(" ", "_")
    project_dir = os.path.join(BASE_DOC_PATH, folder_name)

    if not os.path.exists(project_dir):
        await callback.answer("‚ùó –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    # –ü—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É ZIP-–∞—Ä—Ö–∏–≤—É
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    zip_base_name = f"{folder_name}_{timestamp}"
    zip_path = os.path.join(BASE_DOC_PATH, f"{zip_base_name}.zip")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
    shutil.make_archive(
        base_name=os.path.join(BASE_DOC_PATH, zip_base_name),
        format="zip",
        root_dir=project_dir
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await callback.message.bot.send_document(
            chat_id=callback.message.chat.id,
            document=FSInputFile(zip_path),
            caption=f"üì¶ –ê—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–∞: <b>{order_title}</b>",
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—Ä—Ö–∏–≤.", show_alert=True)
        return
    finally:
        # –£–¥–∞–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if os.path.exists(zip_path):
            os.remove(zip_path)

    await callback.answer("‚úÖ –ê—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    
def extract_with_cp1251(zip_path, dest_folder):
    with zipfile.ZipFile(zip_path) as zf:
        for zinfo in zf.infolist():
            try:
                raw_name = zinfo.filename.encode('cp437')
            except Exception:
                raw_name = zinfo.filename.encode(errors='replace')
            try:
                decoded_name = raw_name.decode('cp1251')
            except UnicodeDecodeError:
                try:
                    decoded_name = raw_name.decode('utf-8')
                except Exception:
                    decoded_name = zinfo.filename
            zinfo.filename = decoded_name
            zf.extract(zinfo, dest_folder)

def rename_folders_to_latin(base_folder):
    mapping = {
        "–ò–†–î": "IRD",
        "–¢–£": "TU",
        "–ì–µ–æ–ª–æ–≥–∏—è": "Geologia"
    }
    for old_name, new_name in mapping.items():
        old_path = os.path.join(base_folder, old_name)
        new_path = os.path.join(base_folder, new_name)
        if os.path.exists(old_path):
            os.rename(old_path, new_path)

def zip_folder(folder_path, zip_path):
    """–£–ø–∞–∫–æ–≤–∞—Ç—å –ø–∞–ø–∫—É –≤ zip."""
    with zipfile.ZipFile(zip_path, "w", zipfile.ZIP_DEFLATED) as zf:
        for root, dirs, files in os.walk(folder_path):
            for file in files:
                full_path = os.path.join(root, file)
                # –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –≤–Ω—É—Ç—Ä–∏ –∞—Ä—Ö–∏–≤–∞
                rel_path = os.path.relpath(full_path, folder_path)
                zf.write(full_path, rel_path)

@router.callback_query(F.data.startswith("order_accept:"))
async def accept_order(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    await update_order_status(order_id, "approved")
    gip_id = callback.from_user.id
    await set_order_gip(order_id, gip_id)

    order = await get_order_by_id(order_id)
    title = order["title"]
    safe_title = re.sub(r'[^\w\-]', '_', title)
    project_folder = os.path.join("documents", safe_title)
    os.makedirs(project_folder, exist_ok=True)

    src_temp_file_path = order["document_url"]
    dest_file_path = os.path.join(project_folder, "ird1_file.zip")

    try:
        shutil.copy(src_temp_file_path, dest_file_path)

        # === 1. –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ ===
        extract_with_cp1251(dest_file_path, project_folder)

        # === 2. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü—É ===
        rename_folders_to_latin(project_folder)

        # === 3. –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –ø–∞–ø–∫–∏ ===
        for folder_name in ["IRD", "TU", "Geologia"]:
            folder_path = os.path.join(project_folder, folder_name)
            if os.path.exists(folder_path) and os.path.isdir(folder_path):
                zip_path = os.path.join(project_folder, f"{folder_name}.zip")
                zip_folder(folder_path, zip_path)
                shutil.rmtree(folder_path)  # —É–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É

        # === 4. –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–µ–µ ===
        for item in os.listdir(project_folder):
            if item not in ["IRD.zip", "TU.zip", "Geologia.zip", "ird1_file.zip"]:
                path = os.path.join(project_folder, item)
                if os.path.isdir(path):
                    shutil.rmtree(path)
                else:
                    os.remove(path)

        # === 5. –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∞—Ä—Ö–∏–≤ –∏–∑ temporary ===
        if os.path.exists(src_temp_file_path):
            os.remove(src_temp_file_path)

        # === 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –≤ –ë–î ===
        await update_order_document_url(order_id, project_folder)

        await callback.message.answer(
            f"üì¶ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –∑–∞–∫–∞–∑—á–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ <b>{safe_title}/ird1_file.zip</b>.\n"
            f"üìÇ –ü–∞–ø–∫–∏ IRD, TU –∏ Geologia —É–ø–∞–∫–æ–≤–∞–Ω—ã –≤ –∞—Ä—Ö–∏–≤—ã.",
            parse_mode="HTML"
        )

    except Exception as e:
        await callback.message.answer(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return

    new_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–¥–∞—Ç—å –≠–ü", callback_data=f"assign_sketch:{order_id}")]
    ])
    if callback.message.caption:
        updated_caption = callback.message.caption + "\n\n‚úÖ –ó–∞–∫–∞–∑ –±—ã–ª –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ —ç—Å–∫–∏–∑—á–∏–∫—É."
        await callback.message.edit_caption(caption=updated_caption, reply_markup=new_keyboard)
    else:
        updated_text = callback.message.text + "\n\n‚úÖ –ó–∞–∫–∞–∑ –±—ã–ª –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ —ç—Å–∫–∏–∑—á–∏–∫—É."
        await callback.message.edit_text(text=updated_text, reply_markup=new_keyboard)
        
@router.callback_query(F.data.startswith("order_reject:"))
async def reject_order(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])

    orders = await get_all_orders()
    order = next((o for o in orders if o["id"] == order_id), None)

    if order:
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
        document_path = os.path.abspath(os.path.join(BASE_DOC_PATH, os.path.relpath(order["document_url"], "documents")))
        if os.path.exists(document_path):
            try:
                os.remove(document_path)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
        customer_telegram_id = await get_customer_telegram_id(order["customer_id"])
        if customer_telegram_id:
            await callback.bot.send_message(
                chat_id=customer_telegram_id,
                text=(
                    f"üö´ –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω.\n\n"
                    f"üìå <b>{order['title']}</b>\n"
                    f"üìù {order['description']}\n"
                    f"üìÖ –°–æ–∑–¥–∞–Ω: {order['created_at'].strftime('%Y-%m-%d %H:%M')}"
                )
            )

        await delete_order(order_id)

    await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω –∏ —É–¥–∞–ª—ë–Ω ‚ùå", show_alert=True)
    await callback.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω –∏ —É–¥–∞–ª—ë–Ω.")
    
@router.callback_query(F.data.startswith("order_edit:"))
async def edit_order(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.set_state(EditOrder.waiting_for_comment)
    await state.update_data(order_id=order_id)
    await callback.answer()
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑—á–∏–∫—É –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:")


@router.message(EditOrder.waiting_for_comment)
async def process_edit_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data.get("order_id")
    comment = message.text

    orders = await get_all_orders()
    order = next((o for o in orders if o["id"] == order_id), None)

    if not order:
        await message.answer("‚ùó –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    customer_telegram_id = await get_customer_telegram_id(order["customer_id"])
    if customer_telegram_id:
        fix_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤", callback_data=f"start_fix:{order['id']}")]
        ])
        await message.bot.send_message(
            chat_id=customer_telegram_id,
            text=(
                f"‚úèÔ∏è –í–∞—à –∑–∞–∫–∞–∑ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π.\n"
                f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ì–ò–ü–∞:</b> {comment}\n\n"
                f"üìå <b>{order['title']}</b>\n"
                f"üìù {order['description']}\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω: {order['created_at'].strftime('%Y-%m-%d %H:%M')}\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤."
            ),
            reply_markup=fix_kb
        )

    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑—á–∏–∫—É ‚úâÔ∏è")
    await state.clear()

@router.message(F.text == "üì¶ –¢–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã")
async def show_orders_message(message: Message):
    await send_orders_to(message, message.answer)

@router.callback_query(F.data == "view_orders")
async def show_orders_callback(callback: CallbackQuery):
    await send_orders_to(callback.message, callback.message.answer)

# üí¨ –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
async def send_project_files(order_title: str, recipient_telegram_id: int, bot, role: str):
    # –¢–æ–∂–µ –æ—á–∏—â–∞–µ–º –¥–ª—è consistency
    safe_title = re.sub(r'[^\w\-]', '_', order_title)

    folder_path = os.path.join(BASE_DOC_PATH, safe_title)

    if not os.path.exists(folder_path):
        await bot.send_message(recipient_telegram_id, f"‚ùóÔ∏è –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ <b>{order_title}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="HTML")
        return

    if not os.listdir(folder_path):
        await bot.send_message(recipient_telegram_id, f"üìÅ –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ <b>{order_title}</b> –ø—É—Å—Ç–∞.", parse_mode="HTML")
        return

    # üìÅ –í—Ä–µ–º–µ–Ω–Ω—ã–π ZIP –∞—Ä—Ö–∏–≤
    zip_filename = f"{safe_title}.zip"
    zip_path = os.path.join(BASE_DOC_PATH, "temporary", zip_filename)

    os.makedirs(os.path.dirname(zip_path), exist_ok=True)

    # üóú –ê—Ä—Ö–∏–≤–∞—Ü–∏—è –ø–∞–ø–∫–∏
    with zipfile.ZipFile(zip_path, "w", zipfile.ZIP_DEFLATED) as zipf:
        for root, _, files in os.walk(folder_path):
            for file in files:
                abs_path = os.path.join(root, file)
                rel_path = os.path.relpath(abs_path, folder_path)
                zipf.write(abs_path, arcname=rel_path)

    await bot.send_message(
        recipient_telegram_id,
        f"üì¶ –ü–µ—Ä–µ–¥–∞–Ω –∞—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–∞ <b>{order_title}</b> –¥–ª—è —Ä–æ–ª–∏: {role}",
        parse_mode="HTML"
    )
    await bot.send_document(recipient_telegram_id, FSInputFile(zip_path))

    try:
        os.remove(zip_path)
    except Exception as e:
        print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π ZIP: {e}")
# ‚úÖ –ü–µ—Ä–µ–¥–∞—Ç—å —Ä–∞—Å—á–µ—Ç—á–∏–∫—É
@router.callback_query(F.data.startswith("assign_calculator:"))
async def assign_to_calculator(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.update_data(order_id=order_id)
    await state.set_state(AssignCalculatorFSM.waiting_for_description)

    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç—á–∏–∫–∞:")
    await callback.answer()

@router.message(AssignCalculatorFSM.waiting_for_description)
async def receive_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    await state.set_state(AssignCalculatorFSM.waiting_for_deadline)
    await message.answer("üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ –¥–Ω—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3):")

@router.message(AssignCalculatorFSM.waiting_for_deadline)
async def receive_deadline(message: Message, state: FSMContext):
    try:
        days = int(message.text.strip())
        if days <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5)")
        return

    data = await state.get_data()
    order_id = data["order_id"]
    description = data["description"]
    deadline = date.today() + timedelta(days=days)

    order = await get_order_by_id(order_id)
    calculator = await get_specialist_by_section("—Ä—Å")
    if not calculator:
        await message.answer("‚ùó –†–∞—Å—á–µ—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    await create_task(
        order_id=order_id,
        section="—Ä—Å",
        specialist_id=calculator["telegram_id"],
        description=description,
        deadline=deadline,
        status="–Ω–∞–∑–Ω–∞—á–µ–Ω–æ"
    )

    await send_project_files(order["title"], calculator["telegram_id"], message.bot, "—Ä—Å")

    await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –ø–µ—Ä–µ–¥–∞–Ω–æ —Ä–∞—Å—á–µ—Ç—á–∏–∫—É.")
    await state.clear()

@router.callback_query(F.data.startswith("approve_calc:"))
async def handle_calc_approval(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    await callback.message.answer(f"üìå –†–∞—Å—á—ë—Ç—ã. –û–¥–æ–±—Ä—è–µ–º –∑–∞–∫–∞–∑: {order_id}")

    # üóÇ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
    await update_order_status(order_id, "waiting_cl")
    await update_task_status(order_id=order_id, section="—Ä—Å", new_status="–°–¥–µ–ª–∞–Ω–æ")

    # ‚úÖ –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    specialist = await get_specialist_by_order_and_section(order_id, "—Ä—Å")
    if specialist:
        await callback.bot.send_message(
            chat_id=specialist["telegram_id"],
            text=f"‚úÖ –í–∞—à —Ä–∞—Å—á—ë—Ç –ø–æ –∑–∞–∫–∞–∑—É #{order_id} –ø—Ä–∏–Ω—è—Ç –ì–ò–ü–æ–º."
        )

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ tasks.document_url
    relative_task_file = await get_calc_task_document(order_id)

    if not relative_task_file:
        await callback.message.answer("‚ùóÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –ì–µ–Ω–ø–ª–∞–Ω–∞ (tasks.document_url).")
        return

    # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
    BASE_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "psdbot"))

    # –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–∑ –ø–∞–ø–∫–∏ temporary
    source_abs_path = os.path.join(BASE_PATH, "documents", "temporary", os.path.basename(relative_task_file))

    if not os.path.exists(source_abs_path):
        await callback.message.answer("‚ùóÔ∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ temporary.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ order.document_url
    order = await get_order_by_id(order_id)
    document_url = order.get("document_url")
    if not document_url:
        await callback.message.answer("‚ùóÔ∏è –ù–µ —É–∫–∞–∑–∞–Ω document_url —É –∑–∞–∫–∞–∑–∞.")
        return

    project_folder_rel = document_url.replace("\\", "/")  # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    project_abs_path = os.path.join(BASE_PATH, project_folder_rel)

    if not os.path.exists(project_abs_path):
        await callback.message.answer(f"‚ùóÔ∏è –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {project_abs_path}")
        return

    # –¶–µ–ª–µ–≤–æ–π –ø—É—Ç—å –¥–ª—è —Ñ–∞–π–ª–∞
    final_path = os.path.join(project_abs_path, "calc_files.zip")

    try:
        shutil.move(source_abs_path, final_path)
    except Exception as e:
        await callback.message.answer(f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return

    # üíæ –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –≤ –ë–î (tasks.document_url)
    await update_task_document_url(
        order_id=order_id,
        section="—Ä—Å",
        document_url=os.path.join("documents", os.path.basename(project_folder_rel), "calc_files.zip")
    )

    # ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await callback.message.edit_reply_markup()
    await callback.message.answer("‚úÖ –†–∞—Å—á—ë—Ç –ø—Ä–∏–Ω—è—Ç –∏ —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ –∫–∞–∫ <b>calc_files.zip</b>.")
    await callback.answer("–§–∞–π–ª –ø—Ä–∏–Ω—è—Ç ‚úÖ", show_alert=True)

@router.callback_query(F.data.startswith("revise_calc:"))
async def handle_calc_revision(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.set_state(ReviewCalcCorrectionFSM.waiting_for_comment)
    await state.update_data(order_id=order_id, section="—Ä—Å")

    await callback.message.edit_reply_markup()
    await callback.message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ —Ä–∞—Å—á—ë—Ç—É:")
    await callback.answer()

@router.message(ReviewCalcCorrectionFSM.waiting_for_comment)
async def handle_calc_correction_comment(message: Message, state: FSMContext):
    from database import get_specialist_by_order_and_section

    data = await state.get_data()
    order_id = data["order_id"]
    section = data["section"]  # –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å '—Ä—Å'
    comment = message.text.strip()

    specialist = await get_specialist_by_order_and_section(order_id, section)

    if not specialist:
        await message.answer("‚ùóÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ä–∞—Å—á—ë—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    await message.bot.send_message(
        chat_id=specialist["telegram_id"],
        text=(
            f"‚ùóÔ∏è –ó–∞–º–µ—á–∞–Ω–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª—É <b>{section.upper()}</b> –ø–æ –∑–∞–∫–∞–∑—É #{order_id}:\n\n"
            f"üìù {comment}"
        ),
        parse_mode="HTML"
    )

    await message.answer("‚úÖ –ó–∞–º–µ—á–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–∞—Å—á—ë—Ç—á–∏–∫—É.")
    await state.clear()

@router.callback_query(F.data.startswith("assign_genplan:"))
async def assign_to_genplanner(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    order = await get_order_by_id(order_id)

    if not order:
        await callback.message.answer("‚ùó –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    await state.update_data(order_id=order_id)
    await state.set_state(AssignGenplanFSM.waiting_for_description)

    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞–∑–¥–µ–ª—É –ì–µ–Ω–ø–ª–∞–Ω:")
    await callback.answer()

@router.message(AssignGenplanFSM.waiting_for_description)
async def get_genplan_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    await state.set_state(AssignGenplanFSM.waiting_for_deadline)
    await message.answer("üìÖ –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: 7):")


@router.message(AssignGenplanFSM.waiting_for_deadline)
async def get_genplan_deadline(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data["order_id"]
    description = data["description"]
    days_str = message.text.strip()

    if not days_str.isdigit():
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: 7")
        return

    days = int(days_str)
    deadline = datetime.now() + timedelta(days=days)

    order = await get_order_by_id(order_id)
    order_title = order["title"]
    genplan = await get_specialist_by_section("–≥–ø")
    genplan_name = genplan.get("full_name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    if not genplan:
        await message.answer("‚ùó –ì–µ–Ω–ø–ª–∞–Ω–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    await create_task(
        order_id=order_id,
        section="–≥–ø",
        specialist_id=genplan["telegram_id"],
        description=description,
        deadline=deadline,
        status="assigned"
    )

    await send_project_files(order_title, genplan["telegram_id"], message.bot, "–≥–ø")

    await message.answer(
    f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–æ —Ä–∞–∑–¥–µ–ª—É <b>–ì–µ–Ω–ø–ª–∞–Ω</b> –ø–µ—Ä–µ–¥–∞–Ω–æ –≥–µ–Ω–ø–ª–∞–Ω–∏—Å—Ç—É {genplan_name} —Å–æ —Å—Ä–æ–∫–æ–º {days} –¥–Ω.",
    parse_mode="HTML"
)
    await state.clear()

@router.callback_query(F.data.startswith("approve_genplan:"))
async def handle_genplan_approval(callback: CallbackQuery):

    order_id = int(callback.data.split(":")[1])
    await callback.message.answer(f"üìå –ì–µ–Ω–ø–ª–∞–Ω. –û–¥–æ–±—Ä—è–µ–º –∑–∞–∫–∞–∑: {order_id}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
    await update_order_status(order_id, "waiting_cl")
    await update_task_status(order_id=order_id, section="–≥–ø", new_status="–°–¥–µ–ª–∞–Ω–æ")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≥–µ–Ω–ø–ª–∞–Ω–∏—Å—Ç–∞
    specialist = await get_specialist_by_order_and_section(order_id, "–≥–ø")
    if specialist:
        await callback.bot.send_message(
            chat_id=specialist["telegram_id"],
            text=f"‚úÖ –í–∞—à —Ñ–∞–π–ª –ø–æ —Ä–∞–∑–¥–µ–ª—É –ì–µ–Ω–ø–ª–∞–Ω –ø–æ –∑–∞–∫–∞–∑—É #{order_id} –ø—Ä–∏–Ω—è—Ç –ì–ò–ü–æ–º."
        )

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ tasks.document_url
    relative_task_file = await get_genplan_task_document(order_id)

    if not relative_task_file:
        await callback.message.answer("‚ùóÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –ì–µ–Ω–ø–ª–∞–Ω–∞ (tasks.document_url).")
        return

    # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
    BASE_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "psdbot"))

    # –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–∑ –ø–∞–ø–∫–∏ temporary
    source_abs_path = os.path.join(BASE_PATH, "documents", "temporary", os.path.basename(relative_task_file))

    if not os.path.exists(source_abs_path):
        await callback.message.answer("‚ùóÔ∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ temporary.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ order.document_url
    order = await get_order_by_id(order_id)
    document_url = order.get("document_url")
    if not document_url:
        await callback.message.answer("‚ùóÔ∏è –ù–µ —É–∫–∞–∑–∞–Ω document_url —É –∑–∞–∫–∞–∑–∞.")
        return

    project_folder_rel = document_url.replace("\\", "/")  # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    project_abs_path = os.path.join(BASE_PATH, project_folder_rel)

    if not os.path.exists(project_abs_path):
        await callback.message.answer(f"‚ùóÔ∏è –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {project_abs_path}")
        return

    # –¶–µ–ª–µ–≤–æ–π –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    final_path = os.path.join(project_abs_path, "genplan_files.zip")

    try:
        shutil.move(source_abs_path, final_path)
    except Exception as e:
        await callback.message.answer(f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
    await callback.message.edit_reply_markup()
        # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    await update_task_document_url(
        order_id=order_id,
        section="–≥–ø",
        document_url=os.path.join("documents", os.path.basename(project_folder_rel), "genplan_files.zip")
    )

    await callback.message.answer("‚úÖ –†–∞–∑–¥–µ–ª –ì–µ–Ω–ø–ª–∞–Ω –ø—Ä–∏–Ω—è—Ç. –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ –∫–∞–∫ <b>genplan_files.zip</b>.")
    await callback.answer("–§–∞–π–ª –ø—Ä–∏–Ω—è—Ç ‚úÖ", show_alert=True)

# ‚ùå –ó–∞–º–µ—á–∞–Ω–∏—è –ø–æ –≥–µ–Ω–ø–ª–∞–Ω—É
@router.callback_query(F.data.startswith("revise_genplan:"))
async def handle_genplan_revision(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.set_state(ReviewGenplanCorrectionFSM.waiting_for_comment)
    await state.update_data(order_id=order_id, section="–≥–ø")

    await callback.message.edit_reply_markup()
    await callback.message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ –ì–µ–Ω–ø–ª–∞–Ω—É:")
    await callback.answer()


# üì© –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
@router.message(ReviewGenplanCorrectionFSM.waiting_for_comment)
async def handle_genplan_correction_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data["order_id"]
    section = data["section"]
    comment = message.text.strip()

    specialist = await get_specialist_by_order_and_section(order_id, section)

    if not specialist:
        await message.answer("‚ùóÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ì–µ–Ω–ø–ª–∞–Ω—É –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    await message.bot.send_message(
        chat_id=specialist["telegram_id"],
        text=(
            f"‚ùóÔ∏è –ó–∞–º–µ—á–∞–Ω–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª—É <b>{section.upper()}</b> –ø–æ –∑–∞–∫–∞–∑—É #{order_id}:\n\n"
            f"üìù {comment}"
        ),
        parse_mode="HTML"
    )

    await message.answer("‚úÖ –ó–∞–º–µ—á–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≥–µ–Ω–ø–ª–∞–Ω–∏—Å—Ç—É.")
    await state.clear()


@router.callback_query(F.data.startswith("approve_estimate:"))
async def handle_approve_estimate(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    await callback.message.answer(f"üìå –°–º–µ—Ç–∞. –û–¥–æ–±—Ä—è–µ–º –∑–∞–∫–∞–∑: {order_id}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
    await update_order_status(order_id, "completed")
    await update_task_status(order_id=order_id, section="—Å–º–µ—Ç–∞", new_status="–°–º–µ—Ç–∞ —Å–¥–µ–ª–∞–Ω–∞")

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–º–µ—Ç—ã –∏–∑ tasks.document_url
    relative_task_file = await get_estimate_task_document(order_id)

    if not relative_task_file:
        await callback.message.answer("‚ùóÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å–º–µ—Ç—ã (tasks.document_url).")
        return

    # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
    BASE_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "psdbot"))

    # –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–∑ –ø–∞–ø–∫–∏ temporary
    source_abs_path = os.path.join(BASE_PATH, "documents", "temporary", os.path.basename(relative_task_file))

    if not os.path.exists(source_abs_path):
        await callback.message.answer(f"‚ùóÔ∏è –§–∞–π–ª —Å–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ temporary: {source_abs_path}")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ order.document_url
    order = await get_order_by_id(order_id)
    document_url = order.get("document_url")
    if not document_url:
        await callback.message.answer("‚ùóÔ∏è –ù–µ —É–∫–∞–∑–∞–Ω document_url —É –∑–∞–∫–∞–∑–∞.")
        return

    project_folder_rel = document_url.replace("\\", "/")
    project_abs_path = os.path.join(BASE_PATH, project_folder_rel)

    if not os.path.exists(project_abs_path):
        await callback.message.answer(f"‚ùóÔ∏è –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {project_abs_path}")
        return

    # –¶–µ–ª–µ–≤–æ–π –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    estimate_file_path = os.path.join(project_abs_path, "estimate_files.zip")

    try:
        shutil.move(source_abs_path, estimate_file_path)
    except Exception as e:
        await callback.message.answer(f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return

    # –ü–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –ë–î
    await update_task_document_url(
        order_id=order_id,
        section="—Å–º–µ—Ç–∞",
        document_url=os.path.join("documents", os.path.basename(project_folder_rel), "estimate_files.zip")
    )

    # –ó–∞–≤–µ—Ä—à–∞–µ–º
    await callback.message.edit_reply_markup()
    await callback.message.answer("‚úÖ –°–º–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞. –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ –∫–∞–∫ <b>estimate_files.zip</b>.")
    await callback.answer("–§–∞–π–ª —Å–º–µ—Ç—ã –ø—Ä–∏–Ω—è—Ç ‚úÖ", show_alert=True)

@router.message(lambda m: m.text and m.text.strip() == "üìÅ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã")
async def handle_completed_orders(message: types.Message):
    await send_completed_orders_to(message, message.answer)


async def send_completed_orders_to(recipient, send_method):
    orders = await get_completed_orders()

    if not orders:
        await send_method("üì≠ –ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return
    
    for order in orders:
        text = (
            f"üìå <b>{order['title']}</b>\n"
            f"üìù {order['description']}\n"
            f"üë§ –ó–∞–∫–∞–∑—á–∏–∫ ID: {order['customer_id']}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {order['created_at'].strftime('%Y-%m-%d %H:%M')}\n"
            f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç", callback_data=f"send_project_zip:{order['id']}")]
        ])

        document_path = os.path.abspath(os.path.join(BASE_DOC_PATH, os.path.relpath(order["document_url"], "documents")))
        if os.path.exists(document_path):
            await send_method(text, reply_markup=keyboard)
        else:
            await send_method(f"{text}\n\n‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {document_path}", reply_markup=keyboard)


@router.callback_query(F.data.startswith("assign_sm:"))
async def handle_assign_sm(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    order = await get_order_by_id(order_id)
    smetchik = await get_specialist_by_section("—Å–º–µ—Ç–∞")

    if not smetchik:
        await callback.message.answer("‚ùóÔ∏è –°–º–µ—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await state.set_state(AssignSmetchikFSM.waiting_for_deadline)
    await state.update_data(
        order_id=order_id,
        specialist_id=smetchik["telegram_id"],
        title=order["title"]
    )

    await callback.message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5):")
    await callback.answer()


@router.message(AssignSmetchikFSM.waiting_for_deadline)
async def receive_sm_deadline_days(message: Message, state: FSMContext):
    try:
        days = int(message.text.strip())
        if days <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞.")
        return

    deadline = datetime.today().date() + timedelta(days=days)
    await state.update_data(deadline=deadline, days=days)
    await state.set_state(AssignSmetchikFSM.waiting_for_description)
    await message.answer("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–º–µ—Ç—á–∏–∫–∞:")


@router.message(AssignSmetchikFSM.waiting_for_description)
async def receive_sm_description(message: Message, state: FSMContext):
    data = await state.get_data()

    order_id = data["order_id"]
    specialist_id = data["specialist_id"]
    title = data["title"]
    deadline = data["deadline"]
    days = data["days"]
    description = message.text.strip()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –∑–∞–∫–∞–∑–∞
    sections = await get_sections_by_order_id(order_id)  # [{'section': '–∞—Ä'}, {'section': '–∫–∂'}, ...]

    await update_order_status(order_id, "assigned_sm")
    await create_task(
        order_id=order_id,
        section="—Å–º–µ—Ç–∞",
        description=description,
        deadline=deadline,
        specialist_id=specialist_id,
        status="–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ—Ç—ã"
    )

    caption = (
        f"üìÑ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Å–º–µ—Ç—ã:\n"
        f"üìå <b>{title}</b>\n"
        f"üìù {description}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ {days} –¥–Ω. ({deadline.strftime('%d.%m.%Y')})"
    )

    base_dir = os.path.join(os.getcwd(), "documents", title.replace(" ", "_"))

    all_files = []
    for sec in sections:
        section_name = sec["section"] if isinstance(sec, dict) else sec.section
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º section: {section_name}")

        files = section_files_map.get(section_name.lower())
        if not files:
            continue

        for file_name in files:
            file_path = os.path.join(base_dir, file_name)
            if os.path.exists(file_path):
                all_files.append(file_path)
            else:
                await message.answer(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

    # –°–æ–∑–¥–∞—ë–º –æ–±—â–∏–π –∞—Ä—Ö–∏–≤
    if all_files:
        archive_path = os.path.join(base_dir, "combined_files.zip")
        with zipfile.ZipFile(archive_path, 'w') as archive:
            for file_path in all_files:
                archive.write(file_path, arcname=os.path.basename(file_path))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤
        await message.bot.send_document(
            chat_id=specialist_id,
            document=FSInputFile(archive_path),
            caption=caption,
            parse_mode="HTML"
        )
    else:
        await message.answer("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏.")

    await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ —Å–º–µ—Ç—á–∏–∫—É.")
    await state.clear()


@router.callback_query(F.data.startswith("attach_pz:"))
async def handle_attach_pz(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.update_data(order_id=order_id, file_type="pz")
    await callback.message.answer("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –ø–æ—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∫–∏ (ZIP)")
    await state.set_state("waiting_for_pz_file")

@router.message(AttachFilesFSM.waiting_for_pz_file, F.document)
async def save_pz_file(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data["order_id"]

    order = await get_order_by_id(order_id)
    project_folder = os.path.join(BASE_DOC_PATH, os.path.basename(order["document_url"]))
    os.makedirs(project_folder, exist_ok=True)

    file = await message.document.download(destination_file=os.path.join(project_folder, "–ü–ó.zip"))
    await message.answer("‚úÖ –ü–æ—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ.")
    await state.clear()


@router.callback_query(F.data.startswith("attach_pos:"))
async def handle_attach_pos(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.update_data(order_id=order_id, file_type="pos")
    await callback.message.answer("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –ü–û–° (ZIP)")
    await state.set_state(AttachFilesFSM.waiting_for_pos_file)

@router.message(AttachFilesFSM.waiting_for_pos_file, F.document)
async def save_pos_file(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data["order_id"]

    order = await get_order_by_id(order_id)
    project_folder = os.path.join(BASE_DOC_PATH, os.path.basename(order["document_url"]))
    os.makedirs(project_folder, exist_ok=True)

    await message.document.download(destination_file=os.path.join(project_folder, "–ü–û–°.zip"))
    await message.answer("‚úÖ –ü–û–° —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ø—Ä–æ–µ–∫—Ç–µ.")
    await state.clear()