from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, Document
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from database import get_orders_by_specialist_id, get_order_by_id, get_available_ar_executors, assign_ar_executor_to_order, get_ar_executors_by_order, get_executors_for_order, update_task_for_executor, get_unassigned_executors, assign_executor_to_ar, get_user_by_id, get_user_by_telegram_id
import os
from datetime import datetime, date, timedelta


class GiveTaskARFSM(StatesGroup):
    waiting_for_comment = State()
    waiting_for_deadline = State()

router = Router()
BASE_DOC_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "clientbot", "documents"))

class SubmitArFSM(StatesGroup):
    waiting_for_file = State()

def get_gip_review_keyboard(order_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–µ—Ä–µ–¥–∞—Ç—å –∑–∞–∫–∞–∑—á–∏–∫—É", callback_data=f"gip_approve:{order_id}"),
            InlineKeyboardButton(text="‚ùå –¢—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π", callback_data=f"gip_reject:{order_id}")
        ]
    ])

@router.message(F.text == "üìÑ –ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def show_ar_orders(message: Message):
    orders = await get_orders_by_specialist_id(message.from_user.id, section="–∞—Ä")

    if not orders:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    for order in orders:
        order_id = order["id"]
        status = order["status"]
        doc_path = os.path.abspath(os.path.join(BASE_DOC_PATH, os.path.relpath(order["document_url"], "documents")))

        buttons = []

        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–∞ —ç—Ç–∞–ø–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        if status == "assigned_ar":
            buttons.append(InlineKeyboardButton(text="üë• –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π", callback_data=f"assign_ar_execs:{order_id}"))

        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
        executors = await get_ar_executors_by_order(order_id)
        if executors:
            buttons.append(InlineKeyboardButton(text="üì§ –î–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"give_task_ar:{order_id}"))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É" –≤—Å–µ–≥–¥–∞
        buttons.append(InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data=f"submit_ar:{order_id}"))

        keyboard = InlineKeyboardMarkup(inline_keyboard=[[button] for button in buttons]) if buttons else None

        if os.path.exists(doc_path):
            caption = (
                f"üìå <b>{order['title']}</b>\n"
                f"üìù {order['description']}\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω: {order['created_at'].strftime('%Y-%m-%d %H:%M')}"
            )
            await message.answer_document(FSInputFile(doc_path), caption=caption, reply_markup=keyboard)
        else:
            await message.answer(f"‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {order['title']}")

@router.callback_query(F.data.startswith("submit_ar:"))
async def handle_submit_ar(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.set_state(SubmitArFSM.waiting_for_file)
    await state.update_data(order_id=order_id)
    await callback.answer()
    await callback.message.answer("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª –ê–† –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ì–ò–ü–æ–º:")

@router.message(SubmitArFSM.waiting_for_file, F.document)
async def receive_ar_document(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data.get("order_id")

    document: Document = message.document
    if not document.file_name.lower().endswith(".pdf"):
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.")
        return

    order = await get_order_by_id(order_id)
    gip_telegram_id = order["gip_id"]

    await message.bot.send_document(
        chat_id=gip_telegram_id,
        document=document.file_id,
        caption=f"üì© –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –ê–† –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É: <b>{order['title']}</b>",
        parse_mode="HTML",
        reply_markup=get_gip_review_keyboard(order['id'])
    )

    await message.answer("‚úÖ –ê–† –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ì–ò–ü—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
    await state.clear()


@router.callback_query(F.data.startswith("assign_ar_execs:"))
async def assign_ar_execs(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    available_execs = await get_available_ar_executors(order_id)

    if not available_execs:
        await callback.message.answer("‚ùó –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.")
        await callback.answer()
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=ex["full_name"], callback_data=f"ar_pick_exec:{order_id}:{ex['telegram_id']}")]
        for ex in available_execs
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("ar_pick_exec:"))
async def confirm_ar_exec(callback: CallbackQuery):
    _, order_id, exec_tg_id = callback.data.split(":")
    specialist_tg_id = callback.from_user.id  # –∫—Ç–æ –Ω–∞–∂–∞–ª ‚Äî —ç—Ç–æ –∏ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç

    # –í—ã–∑–æ–≤ —Å –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    await assign_ar_executor_to_order(
        order_id=int(order_id),
        executor_telegram_id=int(exec_tg_id),
        specialist_telegram_id=int(specialist_tg_id)
    )

    executor_telegram_id = int(exec_tg_id)
    executor_user = await get_user_by_telegram_id(executor_telegram_id)
    if executor_user:
        await callback.bot.send_message(
            chat_id=executor_telegram_id,
            text=f"üìå –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø–æ –∑–∞–∫–∞–∑—É #{order_id} –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –ê–†.",
        )

    await callback.message.answer("‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω.")
    await callback.answer("–ù–∞–∑–Ω–∞—á–µ–Ω–æ ‚úÖ", show_alert=True)

@router.callback_query(F.data.startswith("give_task_ar:"))
async def handle_give_task_ar(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    executors = await get_executors_for_order(order_id, section='–∞—Ä')

    if not executors:
        await callback.message.answer("‚ùó –ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º order_id –≤ FSM
    await state.update_data(order_id=order_id)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∫–∞–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=executor['username'], callback_data=f"select_ar_executor:{executor['id']}")]
        for executor in executors
    ])

    await callback.message.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –∑–∞–¥–∞—á—É:", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("select_ar_executor:"))
async def handle_select_ar_executor(callback: CallbackQuery, state: FSMContext):
    executor_id = int(callback.data.split(":")[1])
    await state.update_data(executor_id=executor_id)

    await state.set_state(GiveTaskARFSM.waiting_for_comment)
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    await callback.answer()


@router.message(GiveTaskARFSM.waiting_for_comment)
async def handle_task_comment(message: Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    await state.set_state(GiveTaskARFSM.waiting_for_deadline)
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-06-15):")


@router.message(GiveTaskARFSM.waiting_for_deadline)
async def handle_task_deadline(message: Message, state: FSMContext):
    try:
        deadline = datetime.strptime(message.text.strip(), "%Y-%m-%d").date()
    except ValueError:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫: 2025-06-15")
        return

    data = await state.get_data()
    order_id = data["order_id"]
    executor_id = data["executor_id"]
    description = data["description"]
    specialist_id = message.from_user.id  # –¢–µ–∫—É—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
    await update_task_for_executor(order_id, executor_id, description, deadline)

    await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–¥–∞–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.")
    await state.clear()


@router.message(F.text == "–ù–∞–Ω—è—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
async def handle_hire_executor(message: Message):
    executors = await get_unassigned_executors()

    if not executors:
        await message.answer("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –±–µ–∑ –æ—Ç–¥–µ–ª–∞.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=executor["full_name"], callback_data=f"hire_ar:{executor['id']}")]
            for executor in executors
        ]
    )

    await message.answer("üë• –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –æ—Ç–¥–µ–ª–∞ –ê–†:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("hire_ar:"))
async def process_executor_hire(callback: CallbackQuery):
    executor_id = int(callback.data.split(":")[1])

    # –û–±–Ω–æ–≤–ª—è–µ–º section –Ω–∞ "–∞—Ä"
    await assign_executor_to_ar(executor_id)

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    executor = await get_user_by_id(executor_id)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    if executor and executor["telegram_id"]:
        try:
            await callback.bot.send_message(
                chat_id=executor["telegram_id"],
                text="üë∑ –í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –≤ –æ—Ç–¥–µ–ª –ê–†. –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞."
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é: {e}")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
    await callback.answer("‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç–¥–µ–ª –ê–†", show_alert=True)
    await callback.message.edit_text("‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ –æ—Ç–¥–µ–ª –ê–†.")