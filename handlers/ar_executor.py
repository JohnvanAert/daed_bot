from aiogram.types import (
    Message, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup,
    CallbackQuery, Document
)
from aiogram import Router, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from database import get_tasks_for_executor, mark_task_as_submitted, get_user_by_telegram_id, get_specialist_by_task_executor_id, get_executor_by_task_executor_id, update_task_status
import os
from datetime import datetime
from aiogram import Bot

router = Router()
BASE_DOC_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "clientbot", "documents"))

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class SubmitTaskFSM(StatesGroup):
    waiting_for_submission_file = State()

class ReviewTaskFSM(StatesGroup):
    waiting_for_revision_comment = State()

@router.message(F.text == "üìå –ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def show_executor_tasks(message: Message):
    executor_id = message.from_user.id
    tasks = await get_tasks_for_executor(executor_id)

    if not tasks:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return

    for task in tasks:
        doc_path = os.path.abspath(os.path.join(BASE_DOC_PATH, os.path.relpath(task["document_url"], "documents")))

        caption = (
            f"üìù <b>{task['title']}</b>\n"
            f"{task['description']}\n"
            f"üïí –î–µ–¥–ª–∞–π–Ω: {task['deadline'].strftime('%Y-%m-%d') if task['deadline'] else '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data=f"submit_task:{task['task_executor_id']}")]
        ])

        if os.path.exists(doc_path):
            await message.answer_document(
                FSInputFile(doc_path),
                caption=caption,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        else:
            await message.answer(f"‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞: {task['title']}")


@router.callback_query(F.data.startswith("submit_task:"))
async def handle_submit_task(callback: CallbackQuery, state: FSMContext):
    task_executor_id = int(callback.data.split(":")[1])
    await state.update_data(task_executor_id=task_executor_id)
    await state.set_state(SubmitTaskFSM.waiting_for_submission_file)
    await callback.message.answer("üìé –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
    await callback.answer()


@router.message(SubmitTaskFSM.waiting_for_submission_file, F.document)
async def handle_submission_file(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    task_executor_id = data.get("task_executor_id")
    document = message.document

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    filename = f"submitted_{task_executor_id}_{document.file_name}"
    save_path = os.path.join(BASE_DOC_PATH, filename)

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Bot API
    file = await bot.get_file(document.file_id)
    await bot.download_file(file.file_path, destination=save_path)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ø—É—Ç—å –≤ –ë–î
    relative_path = os.path.relpath(save_path, BASE_DOC_PATH)
    await mark_task_as_submitted(task_executor_id, relative_path)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    specialist = await get_specialist_by_task_executor_id(task_executor_id)
    if specialist:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_task:{task_executor_id}"),
                InlineKeyboardButton(text="üîÅ –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å", callback_data=f"revise_task:{task_executor_id}")
            ]
        ])

        await bot.send_document(
            chat_id=specialist["specialist_id"],
            document=FSInputFile(save_path),
            caption=(
                f"üì• –ù–æ–≤—ã–π —Ñ–∞–π–ª –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ –∑–∞–¥–∞—á–µ #{task_executor_id}\n"
                f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{message.from_user.username or message.from_user.full_name}"
            ),
            reply_markup=keyboard
        )

    await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.")
    await state.clear()


@router.callback_query(F.data.startswith("approve_task:"))
async def handle_task_approve(callback: CallbackQuery):
    task_executor_id = int(callback.data.split(":")[1])
    await update_task_status(task_executor_id, status="–ü—Ä–∏–Ω—è—Ç–æ")
    await callback.message.edit_caption(
        caption=callback.message.caption + "\n‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ.",
        reply_markup=None
    )
    await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ ‚úÖ")


@router.callback_query(F.data.startswith("revise_task:"))
async def handle_task_revision(callback: CallbackQuery, state: FSMContext):
    task_executor_id = int(callback.data.split(":")[1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º task_executor_id –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å caption
    await state.update_data(
        task_executor_id=task_executor_id,
        message_chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        original_caption=callback.message.caption or ""
    )

    await state.set_state(ReviewTaskFSM.waiting_for_revision_comment)

    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.")
    await callback.answer()

@router.message(ReviewTaskFSM.waiting_for_revision_comment)
async def handle_revision_comment(message: Message, state: FSMContext, bot: Bot):
    from database import update_task_status, get_executor_by_task_executor_id  # –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã

    data = await state.get_data()
    task_executor_id = data["task_executor_id"]
    comment = message.text.strip()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await update_task_status(task_executor_id, status="–¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    executor = await get_executor_by_task_executor_id(task_executor_id)
    if executor:
        await bot.send_message(
            chat_id=executor["executor_id"],
            text=(
                f"üîÅ –ó–∞–¥–∞—á–∞ #{task_executor_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.\n\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:\n<b>{comment}</b>"
            ),
            parse_mode="HTML"
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º caption –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    edited_caption = data["original_caption"] + "\nüîÅ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É."
    await bot.edit_message_caption(
        chat_id=data["message_chat_id"],
        message_id=data["message_id"],
        caption=edited_caption,
        reply_markup=None
    )

    await message.answer("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.")
    await state.clear()


@router.message(ReviewTaskFSM.waiting_for_revision_comment)
async def handle_revision_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    task_executor_id = data.get("task_executor_id")
    comment = message.text.strip()

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ task_executor_id
    from database import get_executor_by_task_executor_id
    executor = await get_executor_by_task_executor_id(task_executor_id)

    if executor:
        await message.bot.send_message(
            chat_id=executor["executor_id"],
            text=(
                f"üîÅ –ó–∞–¥–∞—á–∞ #{task_executor_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.\n\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:\n<b>{comment}</b>"
            ),
            parse_mode="HTML"
        )
        await message.answer("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.")
    else:
        await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ –∑–∞–¥–∞—á–µ.")

    await state.clear()

