from aiogram import Router, F, Bot
from aiogram.types import Message, Document, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove
from states.states import CreateOrder, FixOrder
from database import add_order, get_customer_by_telegram_id
import os
import re
from database import get_all_gips, get_order_by_customer_id, update_order_document
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

router = Router()

@router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
async def start_order_creation(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
    await state.set_state(CreateOrder.waiting_for_title)

@router.message(CreateOrder.waiting_for_title)
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
    await state.set_state(CreateOrder.waiting_for_description)

@router.message(CreateOrder.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    await message.answer("üìé –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—Ä—Ö–∏–≤ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ .zip):")
    await state.set_state(CreateOrder.waiting_for_document)
    

@router.message(CreateOrder.waiting_for_document, F.document)
async def process_document(message: Message, state: FSMContext):
    file = message.document
    if not file.file_name.endswith(".zip"):
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—Ä—Ö–∏–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .zip.")
        return

    data = await state.get_data()
    title = data.get("title", "UnnamedProject")

    # –û—á–∏—Å—Ç–∏–º –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–æ—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _, -)
    safe_title = re.sub(r'[^\w\-]', '_', title)

    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –ø–æ–¥ –ø—Ä–æ–µ–∫—Ç
    project_folder = os.path.join("documents", safe_title)
    os.makedirs(project_folder, exist_ok=True)

    # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    file_path = os.path.join(project_folder, file.file_name)
    await message.bot.download(file, destination=file_path)

    customer = await get_customer_by_telegram_id(message.from_user.id)

    await add_order(
        title=title,
        description=data["description"],
        document_url=file_path,
        customer_id=customer["id"]
    )
# üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ì–ò–ü–∞–º
    gip_ids = await get_all_gips()
    for gip_id in gip_ids:
        try:
            inline_kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üì¶ –û—Ç–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑—ã", callback_data="view_orders")]
                ]
            )
            await message.bot.send_message(
                gip_id,
                f"üì¨ –ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑:\n<b>{title}</b>",
                reply_markup=inline_kb
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ì–ò–ü—É {gip_id}: {e}")

    await message.answer("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=ReplyKeyboardRemove())
    await state.clear()

@router.message(F.document, FixOrder.waiting_for_document)
async def process_fixed_document(message: Message, state: FSMContext):
    file = message.document
    if not file.file_name.endswith(".zip"):
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—Ä—Ö–∏–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .zip.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç–∞
    customer_id = message.from_user.id
    order = await get_order_by_customer_id(customer_id)

    if not order:
        await message.answer("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞
    safe_title = re.sub(r'[^\w\-]', '_', order['title'])
    project_folder = os.path.join("documents", safe_title)
    os.makedirs(project_folder, exist_ok=True)

    file_path = os.path.join(project_folder, file.file_name)
    await message.bot.download(file, destination=file_path)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É –≤ –±–∞–∑–µ
    await update_order_document(order_id=order["id"], new_path=file_path)

    # –£–≤–µ–¥–æ–º–∏–º –≤—Å–µ—Ö –ì–ò–ü–æ–≤
    gip_ids = await get_all_gips()
    for gip_id in gip_ids:
        try:
            inline_kb = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üì¶ –û—Ç–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑—ã", callback_data="view_orders")]]
            )
            await message.bot.send_message(
                chat_id=gip_id,
                text=f"‚ôªÔ∏è –ó–∞–∫–∞–∑ <b>{order['title']}</b> –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω –∑–∞–∫–∞–∑—á–∏–∫–æ–º –∏ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.",
                reply_markup=inline_kb
            )
        except Exception as e:
            print(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ì–ò–ü–∞ {gip_id}: {e}")


    await message.answer("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤ –ø–æ–ª—É—á–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –ì–ò–ü–∞.")

    await state.clear()


@router.callback_query(F.data.startswith("start_fix:"))
async def handle_fix_start(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.set_state(FixOrder.waiting_for_document)
    await state.update_data(order_id=order_id)
    await callback.message.answer("üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤ .zip:")
    await callback.answer()

