from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import os

from database import (
    mark_task_as_submitted,
    get_specialist_by_task_executor_id,
    get_tasks_for_executor
)

router = Router()
BASE_DOC_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "psdbot", "documents"))

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class OvikSubmitTaskFSM(StatesGroup):
    waiting_for_submission_file = State()

# –ü–æ–∫–∞–∑ –∑–∞–¥–∞—á –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ –û–í–∏–ö
@router.message(F.text == "üìå –ú–æ–∏ –∑–∞–¥–∞—á–∏ –ø–æ –û–í–∏–ö")
async def show_ovik_tasks(message: Message):
    executor_id = message.from_user.id
    tasks = await get_tasks_for_executor(executor_id)

    if not tasks:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –ø–æ –û–í–∏–ö.")
        return

    for task in tasks:
        doc_path = os.path.abspath(os.path.join(BASE_DOC_PATH, os.path.relpath(task["document_url"], "documents")))

        caption = (
            f"üìù <b>{task['title']}</b>\n"
            f"{task['description']}\n"
            f"üïí –î–µ–¥–ª–∞–π–Ω: {task['deadline'].strftime('%Y-%m-%d') if task['deadline'] else '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data=f"submit_ovik_task:{task['task_executor_id']}")]
        ])

        if os.path.exists(doc_path):
            await message.answer_document(
                FSInputFile(doc_path),
                caption=caption,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        else:
            await message.answer(f"‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {task['title']}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è
@router.callback_query(F.data.startswith("submit_ovik_task:"))
async def handle_ovik_submit_task(callback: CallbackQuery, state: FSMContext):
    task_executor_id = int(callback.data.split(":")[1])
    await state.update_data(task_executor_id=task_executor_id)
    await state.set_state(OvikSubmitTaskFSM.waiting_for_submission_file)
    await callback.message.answer("üìé –ü—Ä–∏—à–ª–∏—Ç–µ ZIP-—Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ –û–í–∏–ö/–¢–°.")
    await callback.answer()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
@router.message(OvikSubmitTaskFSM.waiting_for_submission_file, F.document)
async def handle_ovik_submission_file(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    task_executor_id = data.get("task_executor_id")
    document = message.document

    if not document.file_name.lower().endswith(".zip"):
        await message.answer("‚ùóÔ∏è –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ ZIP.")
        return

    filename = f"ovik_submit_{task_executor_id}_{document.file_name}"
    save_path = os.path.join(BASE_DOC_PATH, filename)

    file = await bot.get_file(document.file_id)
    await bot.download_file(file.file_path, destination=save_path)

    relative_path = os.path.relpath(save_path, BASE_DOC_PATH)
    await mark_task_as_submitted(task_executor_id, relative_path)

    # –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç
    specialist = await get_specialist_by_task_executor_id(task_executor_id)
    if specialist:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_task:{task_executor_id}"),
                InlineKeyboardButton(text="üîÅ –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å", callback_data=f"revise_task:{task_executor_id}")
            ]
        ])

        await bot.send_document(
            chat_id=specialist["specialist_id"],
            document=FSInputFile(save_path),
            caption=(
                f"üì• –ù–æ–≤—ã–π ZIP –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ –∑–∞–¥–∞—á–µ #{task_executor_id}\n"
                f"üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{message.from_user.username or message.from_user.full_name}"
            ),
            reply_markup=keyboard
        )

    await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–æ –û–í–∏–ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
    await state.clear()
